use inner_common::*;

use std::fmt;

use rand::distributions::{Distribution, Standard};
use rand::Rng;

#[derive(Clone, Copy, PartialEq, Eq, Hash)]
pub struct CardFlags(u64);

pub const ONE_PAST_CARD_FLAGS_MAX: u64 = 1 << DECK_SIZE as u64;
pub const ALL_FLAGS: u64 = ONE_PAST_CARD_FLAGS_MAX - 1;

// TODO make `Standard` generate mostly easy to describe subsets of the cards
//and add another distribution if needed
impl Distribution<CardFlags> for Standard {
    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> CardFlags {
        CardFlags(rng.gen_range(0, ONE_PAST_CARD_FLAGS_MAX))
    }
}

impl CardFlags {
    pub fn new(edges: u64) -> Self {
        CardFlags(edges & (ONE_PAST_CARD_FLAGS_MAX - 1))
    }

    pub fn has_card(&self, card: Card) -> bool {
        self.0 & (1 << card) != 0
    }

    pub fn toggle_card(&mut self, card: Card) {
        let was = self.has_card(card);
        self.set_card_to(card, !was)
    }

    pub fn set_card_to(&mut self, card: Card, to: bool) {
        if to {
            self.set_card(card);
        } else {
            self.unset_card(card);
        }
    }

    pub fn set_card(&mut self, card: Card) {
        self.0 |= 1 << card;
    }
    pub fn unset_card(&mut self, card: Card) {
        self.0 &= !(1 << card);
    }

    pub fn invert(&mut self) {
        *self = CardFlags::new(!self.0);
    }

    pub fn cards(&self) -> Vec<Card> {
        let mut output = Vec::with_capacity(DECK_SIZE as _);

        for card in 0..DECK_SIZE {
            if self.has_card(card) {
                output.push(card);
            }
        }

        output
    }

    pub fn from_cards(cards: Vec<Card>) -> Self {
        let mut output = CardFlags(0);

        for card in cards {
            output.set_card(card);
        }

        output
    }

    pub fn get_bits(&self) -> u64 {
        self.0
    }

    pub fn size(&self) -> u32 {
        self.0.count_ones()
    }
}

impl Iterator for CardFlags {
    type Item = Card;

    fn next(&mut self) -> Option<Self::Item> {
        if self.size() == 0 {
            return None;
        }
        let card = get_lowest_card(self.0);

        self.0 &= !(1 << (card as u64));

        Some(card as Card)
    }
}

use std::ops::BitOr;

impl BitOr<CardFlags> for CardFlags {
    type Output = CardFlags;
    fn bitor(self, other: CardFlags) -> Self::Output {
        CardFlags(self.0 | other.0)
    }
}

impl BitOr<u64> for CardFlags {
    type Output = CardFlags;
    fn bitor(self, other: u64) -> Self::Output {
        CardFlags(self.0 | other)
    }
}

impl BitOr<CardFlags> for u64 {
    type Output = CardFlags;
    fn bitor(self, other: CardFlags) -> Self::Output {
        CardFlags(self | other.0)
    }
}

impl Default for CardFlags {
    fn default() -> Self {
        CardFlags(0)
    }
}

macro_rules! formatted_vec {
    ($fmt_str:expr, $vec:expr) => {
        $vec.iter()
            .map(|s| format!($fmt_str, s))
            .collect::<Vec<_>>()
    };
}

macro_rules! card_bin_formatted_vec {
    ($vec:expr) => {
        formatted_vec!("{:052b}", $vec)
    };
}

macro_rules! all_suits_consts {
    {
        $vis:vis const $clubs:ident: $type:ty = $clubs_expr:expr;
        $diamonds:ident;
        $hearts:ident;
        $spades:ident;
    } => {
        $vis const $clubs: $type = $clubs_expr;
        $vis const $diamonds: $type = $clubs_expr << RANK_COUNT;
        $vis const $hearts: $type = $clubs_expr << (RANK_COUNT * 2);
        $vis const $spades: $type = $clubs_expr << (RANK_COUNT * 3);
    }
}

all_suits_consts! {
    pub const CLUBS_FLAGS: u64 = 0b0001_1111_1111_1111;
    DIAMONDS_FLAGS;
    HEARTS_FLAGS;
    SPADES_FLAGS;
}

pub const BLACK_FLAGS: u64 = CLUBS_FLAGS | SPADES_FLAGS;
pub const RED_FLAGS: u64 = DIAMONDS_FLAGS | HEARTS_FLAGS;

all_suits_consts! {
    pub const CLUBS_FACE_FLAGS: u64 = 0b0001_1100_0000_0000;
    DIAMONDS_FACE_FLAGS;
    HEARTS_FACE_FLAGS;
    SPADES_FACE_FLAGS;
}

all_suits_consts! {
    pub const CLUBS_EVEN_PLUS_Q: u64 = 0b0000_1010_1010_1010;
    DIAMONDS_EVEN_PLUS_Q;
    HEARTS_EVEN_PLUS_Q;
    SPADES_EVEN_PLUS_Q;
}

all_suits_consts! {
    pub const CLUBS_EVEN_SANS_Q: u64 = 0b0000_0010_1010_1010;
    DIAMONDS_EVEN_SANS_Q;
    HEARTS_EVEN_SANS_Q;
    SPADES_EVEN_SANS_Q;
}

all_suits_consts! {
    pub const CLUBS_ODD_PLUS_K_AND_J: u64 = 0b0001_0101_0101_0101;
    DIAMONDS_ODD_PLUS_K_AND_J;
    HEARTS_ODD_PLUS_K_AND_J;
    SPADES_ODD_PLUS_K_AND_J;
}

all_suits_consts! {
    pub const CLUBS_ODD_SANS_K_AND_J: u64 = 0b0000_0001_0101_0101;
    DIAMONDS_ODD_SANS_K_AND_J;
    HEARTS_ODD_SANS_K_AND_J;
    SPADES_ODD_SANS_K_AND_J;
}

pub const SUIT_FLAGS: [u64; SUIT_COUNT as usize] =
    [CLUBS_FLAGS, DIAMONDS_FLAGS, HEARTS_FLAGS, SPADES_FLAGS];

macro_rules! rank_pattern {
    (0) => {
        0b0000000000001_0000000000001_0000000000001_0000000000001
    };
    (1) => {
        0b0000000000010_0000000000010_0000000000010_0000000000010
    };
    (2) => {
        0b0000000000100_0000000000100_0000000000100_0000000000100
    };
    (3) => {
        0b0000000001000_0000000001000_0000000001000_0000000001000
    };
    (4) => {
        0b0000000010000_0000000010000_0000000010000_0000000010000
    };
    (5) => {
        0b0000000100000_0000000100000_0000000100000_0000000100000
    };
    (6) => {
        0b0000001000000_0000001000000_0000001000000_0000001000000
    };
    (7) => {
        0b0000010000000_0000010000000_0000010000000_0000010000000
    };
    (8) => {
        0b0000100000000_0000100000000_0000100000000_0000100000000
    };
    (9) => {
        0b0001000000000_0001000000000_0001000000000_0001000000000
    };
    (10) => {
        0b0010000000000_0010000000000_0010000000000_0010000000000
    };
    (11) => {
        0b0100000000000_0100000000000_0100000000000_0100000000000
    };
    (12) => {
        0b1000000000000_1000000000000_1000000000000_1000000000000
    };
    (0 red) => {
        0b0000000000000_0000000000001_0000000000001_0000000000000
    };
    (1 red) => {
        0b0000000000000_0000000000010_0000000000010_0000000000000
    };
    (2 red) => {
        0b0000000000000_0000000000100_0000000000100_0000000000000
    };
    (3 red) => {
        0b0000000000000_0000000001000_0000000001000_0000000000000
    };
    (4 red) => {
        0b0000000000000_0000000010000_0000000010000_0000000000000
    };
    (5 red) => {
        0b0000000000000_0000000100000_0000000100000_0000000000000
    };
    (6 red) => {
        0b0000000000000_0000001000000_0000001000000_0000000000000
    };
    (7 red) => {
        0b0000000000000_0000010000000_0000010000000_0000000000000
    };
    (8 red) => {
        0b0000000000000_0000100000000_0000100000000_0000000000000
    };
    (9 red) => {
        0b0000000000000_0001000000000_0001000000000_0000000000000
    };
    (10 red) => {
        0b0000000000000_0010000000000_0010000000000_0000000000000
    };
    (11 red) => {
        0b0000000000000_0100000000000_0100000000000_0000000000000
    };
    (12 red) => {
        0b0000000000000_1000000000000_1000000000000_0000000000000
    };
    (0 black) => {
        0b0000000000001_0000000000000_0000000000000_0000000000001
    };
    (1 black) => {
        0b0000000000010_0000000000000_0000000000000_0000000000010
    };
    (2 black) => {
        0b0000000000100_0000000000000_0000000000000_0000000000100
    };
    (3 black) => {
        0b0000000001000_0000000000000_0000000000000_0000000001000
    };
    (4 black) => {
        0b0000000010000_0000000000000_0000000000000_0000000010000
    };
    (5 black) => {
        0b0000000100000_0000000000000_0000000000000_0000000100000
    };
    (6 black) => {
        0b0000001000000_0000000000000_0000000000000_0000001000000
    };
    (7 black) => {
        0b0000010000000_0000000000000_0000000000000_0000010000000
    };
    (8 black) => {
        0b0000100000000_0000000000000_0000000000000_0000100000000
    };
    (9 black) => {
        0b0001000000000_0000000000000_0000000000000_0001000000000
    };
    (10 black) => {
        0b0010000000000_0000000000000_0000000000000_0010000000000
    };
    (11 black) => {
        0b0100000000000_0000000000000_0000000000000_0100000000000
    };
    (12 black) => {
        0b1000000000000_0000000000000_0000000000000_1000000000000
    };
}

pub const RANK_FLAGS: [u64; RANK_COUNT as usize] = [
    rank_pattern!(0),
    rank_pattern!(1),
    rank_pattern!(2),
    rank_pattern!(3),
    rank_pattern!(4),
    rank_pattern!(5),
    rank_pattern!(6),
    rank_pattern!(7),
    rank_pattern!(8),
    rank_pattern!(9),
    rank_pattern!(10),
    rank_pattern!(11),
    rank_pattern!(12),
];

pub const BLACK_RANK_FLAGS: [u64; RANK_COUNT as usize] = [
    rank_pattern!(0 black),
    rank_pattern!(1 black),
    rank_pattern!(2 black),
    rank_pattern!(3 black),
    rank_pattern!(4 black),
    rank_pattern!(5 black),
    rank_pattern!(6 black),
    rank_pattern!(7 black),
    rank_pattern!(8 black),
    rank_pattern!(9 black),
    rank_pattern!(10 black),
    rank_pattern!(11 black),
    rank_pattern!(12 black),
];

pub const RED_RANK_FLAGS: [u64; RANK_COUNT as usize] = [
    rank_pattern!(0 red),
    rank_pattern!(1 red),
    rank_pattern!(2 red),
    rank_pattern!(3 red),
    rank_pattern!(4 red),
    rank_pattern!(5 red),
    rank_pattern!(6 red),
    rank_pattern!(7 red),
    rank_pattern!(8 red),
    rank_pattern!(9 red),
    rank_pattern!(10 red),
    rank_pattern!(11 red),
    rank_pattern!(12 red),
];

macro_rules! consecutive_ranks {
    (0-1 clubs) => {
        0b0_0000_0000_0011
    };
    (0-2 clubs) => {
        0b0_0000_0000_0111
    };
    (0-3 clubs) => {
        0b0_0000_0000_1111
    };
    (0-4 clubs) => {
        0b0_0000_0001_1111
    };
    (0-5 clubs) => {
        0b0_0000_0011_1111
    };
    (0-6 clubs) => {
        0b0_0000_0111_1111
    };
    (0-7 clubs) => {
        0b0_0000_1111_1111
    };
    (0-8 clubs) => {
        0b0_0001_1111_1111
    };
    (0-9 clubs) => {
        0b0_0011_1111_1111
    };
    (0-10 clubs) => {
        0b0_0111_1111_1111
    };
    (0-11 clubs) => {
        0b0_1111_1111_1111
    };
    (0-12 clubs) => {
        0b1_1111_1111_1111
    };
    (1-2 clubs) => {
        0b0_0000_0000_0110
    };
    (1-3 clubs) => {
        0b0_0000_0000_1110
    };
    (1-4 clubs) => {
        0b0_0000_0001_1110
    };
    (1-5 clubs) => {
        0b0_0000_0011_1110
    };
    (1-6 clubs) => {
        0b0_0000_0111_1110
    };
    (1-7 clubs) => {
        0b0_0000_1111_1110
    };
    (1-8 clubs) => {
        0b0_0001_1111_1110
    };
    (1-9 clubs) => {
        0b0_0011_1111_1110
    };
    (1-10 clubs) => {
        0b0_0111_1111_1110
    };
    (1-11 clubs) => {
        0b0_1111_1111_1110
    };
    (1-12 clubs) => {
        0b1_1111_1111_1110
    };
    (2-3 clubs) => {
        0b0_0000_0000_1100
    };
    (2-4 clubs) => {
        0b0_0000_0001_1100
    };
    (2-5 clubs) => {
        0b0_0000_0011_1100
    };
    (2-6 clubs) => {
        0b0_0000_0111_1100
    };
    (2-7 clubs) => {
        0b0_0000_1111_1100
    };
    (2-8 clubs) => {
        0b0_0001_1111_1100
    };
    (2-9 clubs) => {
        0b0_0011_1111_1100
    };
    (2-10 clubs) => {
        0b0_0111_1111_1100
    };
    (2-11 clubs) => {
        0b0_1111_1111_1100
    };
    (2-12 clubs) => {
        0b1_1111_1111_1100
    };
    (3-4 clubs) => {
        0b0_0000_0001_1000
    };
    (3-5 clubs) => {
        0b0_0000_0011_1000
    };
    (3-6 clubs) => {
        0b0_0000_0111_1000
    };
    (3-7 clubs) => {
        0b0_0000_1111_1000
    };
    (3-8 clubs) => {
        0b0_0001_1111_1000
    };
    (3-9 clubs) => {
        0b0_0011_1111_1000
    };
    (3-10 clubs) => {
        0b0_0111_1111_1000
    };
    (3-11 clubs) => {
        0b0_1111_1111_1000
    };
    (3-12 clubs) => {
        0b1_1111_1111_1000
    };
    (4-5 clubs) => {
        0b0_0000_0011_0000
    };
    (4-6 clubs) => {
        0b0_0000_0111_0000
    };
    (4-7 clubs) => {
        0b0_0000_1111_0000
    };
    (4-8 clubs) => {
        0b0_0001_1111_0000
    };
    (4-9 clubs) => {
        0b0_0011_1111_0000
    };
    (4-10 clubs) => {
        0b0_0111_1111_0000
    };
    (4-11 clubs) => {
        0b0_1111_1111_0000
    };
    (4-12 clubs) => {
        0b1_1111_1111_0000
    };
    (5-6 clubs) => {
        0b0_0000_0110_0000
    };
    (5-7 clubs) => {
        0b0_0000_1110_0000
    };
    (5-8 clubs) => {
        0b0_0001_1110_0000
    };
    (5-9 clubs) => {
        0b0_0011_1110_0000
    };
    (5-10 clubs) => {
        0b0_0111_1110_0000
    };
    (5-11 clubs) => {
        0b0_1111_1110_0000
    };
    (5-12 clubs) => {
        0b1_1111_1110_0000
    };
    (6-7 clubs) => {
        0b0_0000_1100_0000
    };
    (6-8 clubs) => {
        0b0_0001_1100_0000
    };
    (6-9 clubs) => {
        0b0_0011_1100_0000
    };
    (6-10 clubs) => {
        0b0_0111_1100_0000
    };
    (6-11 clubs) => {
        0b0_1111_1100_0000
    };
    (6-12 clubs) => {
        0b1_1111_1100_0000
    };
    (7-8 clubs) => {
        0b0_0001_1000_0000
    };
    (7-9 clubs) => {
        0b0_0011_1000_0000
    };
    (7-10 clubs) => {
        0b0_0111_1000_0000
    };
    (7-11 clubs) => {
        0b0_1111_1000_0000
    };
    (7-12 clubs) => {
        0b1_1111_1000_0000
    };
    (8-9 clubs) => {
        0b0_0011_0000_0000
    };
    (8-10 clubs) => {
        0b0_0111_0000_0000
    };
    (8-11 clubs) => {
        0b0_1111_0000_0000
    };
    (8-12 clubs) => {
        0b1_1111_0000_0000
    };
    (9-10 clubs) => {
        0b0_0110_0000_0000
    };
    (9-11 clubs) => {
        0b0_1110_0000_0000
    };
    (9-12 clubs) => {
        0b1_1110_0000_0000
    };
    (10-11 clubs) => {
        0b0_1100_0000_0000
    };
    (10-12 clubs) => {
        0b1_1100_0000_0000
    };
    (11-12 clubs) => {
        0b1_1000_0000_0000
    };
    (0-1 diamonds) => {
        0b0_0000_0000_0011__0_0000_0000_0000
    };
    (0-2 diamonds) => {
        0b0_0000_0000_0111__0_0000_0000_0000
    };
    (0-3 diamonds) => {
        0b0_0000_0000_1111__0_0000_0000_0000
    };
    (0-4 diamonds) => {
        0b0_0000_0001_1111__0_0000_0000_0000
    };
    (0-5 diamonds) => {
        0b0_0000_0011_1111__0_0000_0000_0000
    };
    (0-6 diamonds) => {
        0b0_0000_0111_1111__0_0000_0000_0000
    };
    (0-7 diamonds) => {
        0b0_0000_1111_1111__0_0000_0000_0000
    };
    (0-8 diamonds) => {
        0b0_0001_1111_1111__0_0000_0000_0000
    };
    (0-9 diamonds) => {
        0b0_0011_1111_1111__0_0000_0000_0000
    };
    (0-10 diamonds) => {
        0b0_0111_1111_1111__0_0000_0000_0000
    };
    (0-11 diamonds) => {
        0b0_1111_1111_1111__0_0000_0000_0000
    };
    (0-12 diamonds) => {
        0b1_1111_1111_1111__0_0000_0000_0000
    };
    (1-2 diamonds) => {
        0b0_0000_0000_0110__0_0000_0000_0000
    };
    (1-3 diamonds) => {
        0b0_0000_0000_1110__0_0000_0000_0000
    };
    (1-4 diamonds) => {
        0b0_0000_0001_1110__0_0000_0000_0000
    };
    (1-5 diamonds) => {
        0b0_0000_0011_1110__0_0000_0000_0000
    };
    (1-6 diamonds) => {
        0b0_0000_0111_1110__0_0000_0000_0000
    };
    (1-7 diamonds) => {
        0b0_0000_1111_1110__0_0000_0000_0000
    };
    (1-8 diamonds) => {
        0b0_0001_1111_1110__0_0000_0000_0000
    };
    (1-9 diamonds) => {
        0b0_0011_1111_1110__0_0000_0000_0000
    };
    (1-10 diamonds) => {
        0b0_0111_1111_1110__0_0000_0000_0000
    };
    (1-11 diamonds) => {
        0b0_1111_1111_1110__0_0000_0000_0000
    };
    (1-12 diamonds) => {
        0b1_1111_1111_1110__0_0000_0000_0000
    };
    (2-3 diamonds) => {
        0b0_0000_0000_1100__0_0000_0000_0000
    };
    (2-4 diamonds) => {
        0b0_0000_0001_1100__0_0000_0000_0000
    };
    (2-5 diamonds) => {
        0b0_0000_0011_1100__0_0000_0000_0000
    };
    (2-6 diamonds) => {
        0b0_0000_0111_1100__0_0000_0000_0000
    };
    (2-7 diamonds) => {
        0b0_0000_1111_1100__0_0000_0000_0000
    };
    (2-8 diamonds) => {
        0b0_0001_1111_1100__0_0000_0000_0000
    };
    (2-9 diamonds) => {
        0b0_0011_1111_1100__0_0000_0000_0000
    };
    (2-10 diamonds) => {
        0b0_0111_1111_1100__0_0000_0000_0000
    };
    (2-11 diamonds) => {
        0b0_1111_1111_1100__0_0000_0000_0000
    };
    (2-12 diamonds) => {
        0b1_1111_1111_1100__0_0000_0000_0000
    };
    (3-4 diamonds) => {
        0b0_0000_0001_1000__0_0000_0000_0000
    };
    (3-5 diamonds) => {
        0b0_0000_0011_1000__0_0000_0000_0000
    };
    (3-6 diamonds) => {
        0b0_0000_0111_1000__0_0000_0000_0000
    };
    (3-7 diamonds) => {
        0b0_0000_1111_1000__0_0000_0000_0000
    };
    (3-8 diamonds) => {
        0b0_0001_1111_1000__0_0000_0000_0000
    };
    (3-9 diamonds) => {
        0b0_0011_1111_1000__0_0000_0000_0000
    };
    (3-10 diamonds) => {
        0b0_0111_1111_1000__0_0000_0000_0000
    };
    (3-11 diamonds) => {
        0b0_1111_1111_1000__0_0000_0000_0000
    };
    (3-12 diamonds) => {
        0b1_1111_1111_1000__0_0000_0000_0000
    };
    (4-5 diamonds) => {
        0b0_0000_0011_0000__0_0000_0000_0000
    };
    (4-6 diamonds) => {
        0b0_0000_0111_0000__0_0000_0000_0000
    };
    (4-7 diamonds) => {
        0b0_0000_1111_0000__0_0000_0000_0000
    };
    (4-8 diamonds) => {
        0b0_0001_1111_0000__0_0000_0000_0000
    };
    (4-9 diamonds) => {
        0b0_0011_1111_0000__0_0000_0000_0000
    };
    (4-10 diamonds) => {
        0b0_0111_1111_0000__0_0000_0000_0000
    };
    (4-11 diamonds) => {
        0b0_1111_1111_0000__0_0000_0000_0000
    };
    (4-12 diamonds) => {
        0b1_1111_1111_0000__0_0000_0000_0000
    };
    (5-6 diamonds) => {
        0b0_0000_0110_0000__0_0000_0000_0000
    };
    (5-7 diamonds) => {
        0b0_0000_1110_0000__0_0000_0000_0000
    };
    (5-8 diamonds) => {
        0b0_0001_1110_0000__0_0000_0000_0000
    };
    (5-9 diamonds) => {
        0b0_0011_1110_0000__0_0000_0000_0000
    };
    (5-10 diamonds) => {
        0b0_0111_1110_0000__0_0000_0000_0000
    };
    (5-11 diamonds) => {
        0b0_1111_1110_0000__0_0000_0000_0000
    };
    (5-12 diamonds) => {
        0b1_1111_1110_0000__0_0000_0000_0000
    };
    (6-7 diamonds) => {
        0b0_0000_1100_0000__0_0000_0000_0000
    };
    (6-8 diamonds) => {
        0b0_0001_1100_0000__0_0000_0000_0000
    };
    (6-9 diamonds) => {
        0b0_0011_1100_0000__0_0000_0000_0000
    };
    (6-10 diamonds) => {
        0b0_0111_1100_0000__0_0000_0000_0000
    };
    (6-11 diamonds) => {
        0b0_1111_1100_0000__0_0000_0000_0000
    };
    (6-12 diamonds) => {
        0b1_1111_1100_0000__0_0000_0000_0000
    };
    (7-8 diamonds) => {
        0b0_0001_1000_0000__0_0000_0000_0000
    };
    (7-9 diamonds) => {
        0b0_0011_1000_0000__0_0000_0000_0000
    };
    (7-10 diamonds) => {
        0b0_0111_1000_0000__0_0000_0000_0000
    };
    (7-11 diamonds) => {
        0b0_1111_1000_0000__0_0000_0000_0000
    };
    (7-12 diamonds) => {
        0b1_1111_1000_0000__0_0000_0000_0000
    };
    (8-9 diamonds) => {
        0b0_0011_0000_0000__0_0000_0000_0000
    };
    (8-10 diamonds) => {
        0b0_0111_0000_0000__0_0000_0000_0000
    };
    (8-11 diamonds) => {
        0b0_1111_0000_0000__0_0000_0000_0000
    };
    (8-12 diamonds) => {
        0b1_1111_0000_0000__0_0000_0000_0000
    };
    (9-10 diamonds) => {
        0b0_0110_0000_0000__0_0000_0000_0000
    };
    (9-11 diamonds) => {
        0b0_1110_0000_0000__0_0000_0000_0000
    };
    (9-12 diamonds) => {
        0b1_1110_0000_0000__0_0000_0000_0000
    };
    (10-11 diamonds) => {
        0b0_1100_0000_0000__0_0000_0000_0000
    };
    (10-12 diamonds) => {
        0b1_1100_0000_0000__0_0000_0000_0000
    };
    (11-12 diamonds) => {
        0b1_1000_0000_0000__0_0000_0000_0000
    };
    (0-1 hearts) => {
        0b0_0000_0000_0011__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-2 hearts) => {
        0b0_0000_0000_0111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-3 hearts) => {
        0b0_0000_0000_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-4 hearts) => {
        0b0_0000_0001_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-5 hearts) => {
        0b0_0000_0011_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-6 hearts) => {
        0b0_0000_0111_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-7 hearts) => {
        0b0_0000_1111_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-8 hearts) => {
        0b0_0001_1111_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-9 hearts) => {
        0b0_0011_1111_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-10 hearts) => {
        0b0_0111_1111_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-11 hearts) => {
        0b0_1111_1111_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-12 hearts) => {
        0b1_1111_1111_1111__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-2 hearts) => {
        0b0_0000_0000_0110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-3 hearts) => {
        0b0_0000_0000_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-4 hearts) => {
        0b0_0000_0001_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-5 hearts) => {
        0b0_0000_0011_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-6 hearts) => {
        0b0_0000_0111_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-7 hearts) => {
        0b0_0000_1111_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-8 hearts) => {
        0b0_0001_1111_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-9 hearts) => {
        0b0_0011_1111_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-10 hearts) => {
        0b0_0111_1111_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-11 hearts) => {
        0b0_1111_1111_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-12 hearts) => {
        0b1_1111_1111_1110__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-3 hearts) => {
        0b0_0000_0000_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-4 hearts) => {
        0b0_0000_0001_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-5 hearts) => {
        0b0_0000_0011_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-6 hearts) => {
        0b0_0000_0111_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-7 hearts) => {
        0b0_0000_1111_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-8 hearts) => {
        0b0_0001_1111_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-9 hearts) => {
        0b0_0011_1111_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-10 hearts) => {
        0b0_0111_1111_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-11 hearts) => {
        0b0_1111_1111_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-12 hearts) => {
        0b1_1111_1111_1100__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-4 hearts) => {
        0b0_0000_0001_1000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-5 hearts) => {
        0b0_0000_0011_1000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-6 hearts) => {
        0b0_0000_0111_1000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-7 hearts) => {
        0b0_0000_1111_1000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-8 hearts) => {
        0b0_0001_1111_1000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-9 hearts) => {
        0b0_0011_1111_1000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-10 hearts) => {
        0b0_0111_1111_1000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-11 hearts) => {
        0b0_1111_1111_1000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-12 hearts) => {
        0b1_1111_1111_1000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-5 hearts) => {
        0b0_0000_0011_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-6 hearts) => {
        0b0_0000_0111_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-7 hearts) => {
        0b0_0000_1111_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-8 hearts) => {
        0b0_0001_1111_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-9 hearts) => {
        0b0_0011_1111_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-10 hearts) => {
        0b0_0111_1111_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-11 hearts) => {
        0b0_1111_1111_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-12 hearts) => {
        0b1_1111_1111_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-6 hearts) => {
        0b0_0000_0110_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-7 hearts) => {
        0b0_0000_1110_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-8 hearts) => {
        0b0_0001_1110_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-9 hearts) => {
        0b0_0011_1110_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-10 hearts) => {
        0b0_0111_1110_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-11 hearts) => {
        0b0_1111_1110_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-12 hearts) => {
        0b1_1111_1110_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-7 hearts) => {
        0b0_0000_1100_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-8 hearts) => {
        0b0_0001_1100_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-9 hearts) => {
        0b0_0011_1100_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-10 hearts) => {
        0b0_0111_1100_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-11 hearts) => {
        0b0_1111_1100_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-12 hearts) => {
        0b1_1111_1100_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-8 hearts) => {
        0b0_0001_1000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-9 hearts) => {
        0b0_0011_1000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-10 hearts) => {
        0b0_0111_1000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-11 hearts) => {
        0b0_1111_1000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-12 hearts) => {
        0b1_1111_1000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (8-9 hearts) => {
        0b0_0011_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (8-10 hearts) => {
        0b0_0111_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (8-11 hearts) => {
        0b0_1111_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (8-12 hearts) => {
        0b1_1111_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (9-10 hearts) => {
        0b0_0110_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (9-11 hearts) => {
        0b0_1110_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (9-12 hearts) => {
        0b1_1110_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (10-11 hearts) => {
        0b0_1100_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (10-12 hearts) => {
        0b1_1100_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (11-12 hearts) => {
        0b1_1000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-1 spades) => {
        0b0_0000_0000_0011__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-2 spades) => {
        0b0_0000_0000_0111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-3 spades) => {
        0b0_0000_0000_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-4 spades) => {
        0b0_0000_0001_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-5 spades) => {
        0b0_0000_0011_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-6 spades) => {
        0b0_0000_0111_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-7 spades) => {
        0b0_0000_1111_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-8 spades) => {
        0b0_0001_1111_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-9 spades) => {
        0b0_0011_1111_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-10 spades) => {
        0b0_0111_1111_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-11 spades) => {
        0b0_1111_1111_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (0-12 spades) => {
        0b1_1111_1111_1111__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-2 spades) => {
        0b0_0000_0000_0110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-3 spades) => {
        0b0_0000_0000_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-4 spades) => {
        0b0_0000_0001_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-5 spades) => {
        0b0_0000_0011_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-6 spades) => {
        0b0_0000_0111_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-7 spades) => {
        0b0_0000_1111_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-8 spades) => {
        0b0_0001_1111_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-9 spades) => {
        0b0_0011_1111_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-10 spades) => {
        0b0_0111_1111_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-11 spades) => {
        0b0_1111_1111_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (1-12 spades) => {
        0b1_1111_1111_1110__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-3 spades) => {
        0b0_0000_0000_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-4 spades) => {
        0b0_0000_0001_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-5 spades) => {
        0b0_0000_0011_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-6 spades) => {
        0b0_0000_0111_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-7 spades) => {
        0b0_0000_1111_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-8 spades) => {
        0b0_0001_1111_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-9 spades) => {
        0b0_0011_1111_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-10 spades) => {
        0b0_0111_1111_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-11 spades) => {
        0b0_1111_1111_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (2-12 spades) => {
        0b1_1111_1111_1100__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-4 spades) => {
        0b0_0000_0001_1000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-5 spades) => {
        0b0_0000_0011_1000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-6 spades) => {
        0b0_0000_0111_1000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-7 spades) => {
        0b0_0000_1111_1000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-8 spades) => {
        0b0_0001_1111_1000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-9 spades) => {
        0b0_0011_1111_1000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-10 spades) => {
        0b0_0111_1111_1000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-11 spades) => {
        0b0_1111_1111_1000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (3-12 spades) => {
        0b1_1111_1111_1000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-5 spades) => {
        0b0_0000_0011_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-6 spades) => {
        0b0_0000_0111_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-7 spades) => {
        0b0_0000_1111_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-8 spades) => {
        0b0_0001_1111_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-9 spades) => {
        0b0_0011_1111_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-10 spades) => {
        0b0_0111_1111_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-11 spades) => {
        0b0_1111_1111_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (4-12 spades) => {
        0b1_1111_1111_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-6 spades) => {
        0b0_0000_0110_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-7 spades) => {
        0b0_0000_1110_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-8 spades) => {
        0b0_0001_1110_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-9 spades) => {
        0b0_0011_1110_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-10 spades) => {
        0b0_0111_1110_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-11 spades) => {
        0b0_1111_1110_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (5-12 spades) => {
        0b1_1111_1110_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-7 spades) => {
        0b0_0000_1100_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-8 spades) => {
        0b0_0001_1100_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-9 spades) => {
        0b0_0011_1100_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-10 spades) => {
        0b0_0111_1100_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-11 spades) => {
        0b0_1111_1100_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (6-12 spades) => {
        0b1_1111_1100_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-8 spades) => {
        0b0_0001_1000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-9 spades) => {
        0b0_0011_1000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-10 spades) => {
        0b0_0111_1000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-11 spades) => {
        0b0_1111_1000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (7-12 spades) => {
        0b1_1111_1000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (8-9 spades) => {
        0b0_0011_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (8-10 spades) => {
        0b0_0111_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (8-11 spades) => {
        0b0_1111_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (8-12 spades) => {
        0b1_1111_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (9-10 spades) => {
        0b0_0110_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (9-11 spades) => {
        0b0_1110_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (9-12 spades) => {
        0b1_1110_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (10-11 spades) => {
        0b0_1100_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (10-12 spades) => {
        0b1_1100_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
    (11-12 spades) => {
        0b1_1000_0000_0000__0_0000_0000_0000__0_0000_0000_0000__0_0000_0000_0000
    };
}

const SPECIAL_FLAGS: [u64; 422] = [
    ALL_FLAGS,
    BLACK_FLAGS,
    RED_FLAGS,
    CLUBS_FLAGS,
    DIAMONDS_FLAGS,
    HEARTS_FLAGS,
    SPADES_FLAGS,
    rank_pattern!(0),
    rank_pattern!(1),
    rank_pattern!(2),
    rank_pattern!(3),
    rank_pattern!(4),
    rank_pattern!(5),
    rank_pattern!(6),
    rank_pattern!(7),
    rank_pattern!(8),
    rank_pattern!(9),
    rank_pattern!(10),
    rank_pattern!(11),
    rank_pattern!(12),
    BLACK_RANK_FLAGS[0],
    BLACK_RANK_FLAGS[1],
    BLACK_RANK_FLAGS[2],
    BLACK_RANK_FLAGS[3],
    BLACK_RANK_FLAGS[4],
    BLACK_RANK_FLAGS[5],
    BLACK_RANK_FLAGS[6],
    BLACK_RANK_FLAGS[7],
    BLACK_RANK_FLAGS[8],
    BLACK_RANK_FLAGS[9],
    BLACK_RANK_FLAGS[10],
    BLACK_RANK_FLAGS[11],
    BLACK_RANK_FLAGS[12],
    BLACK_RANK_FLAGS[0],
    RED_RANK_FLAGS[1],
    RED_RANK_FLAGS[2],
    RED_RANK_FLAGS[3],
    RED_RANK_FLAGS[4],
    RED_RANK_FLAGS[5],
    RED_RANK_FLAGS[6],
    RED_RANK_FLAGS[7],
    RED_RANK_FLAGS[8],
    RED_RANK_FLAGS[9],
    RED_RANK_FLAGS[10],
    RED_RANK_FLAGS[11],
    RED_RANK_FLAGS[12],
    consecutive_ranks!(0-11 clubs),
    consecutive_ranks!(0-11 diamonds),
    consecutive_ranks!(0-11 hearts),
    consecutive_ranks!(0-11 spades),
    consecutive_ranks!(1-12 clubs),
    consecutive_ranks!(1-12 diamonds),
    consecutive_ranks!(1-12 hearts),
    consecutive_ranks!(1-12 spades),
    consecutive_ranks!(0-10 clubs),
    consecutive_ranks!(0-10 diamonds),
    consecutive_ranks!(0-10 hearts),
    consecutive_ranks!(0-10 spades),
    consecutive_ranks!(1-11 clubs),
    consecutive_ranks!(1-11 diamonds),
    consecutive_ranks!(1-11 hearts),
    consecutive_ranks!(1-11 spades),
    consecutive_ranks!(2-12 clubs),
    consecutive_ranks!(2-12 diamonds),
    consecutive_ranks!(2-12 hearts),
    consecutive_ranks!(2-12 spades),
    consecutive_ranks!(0-9 clubs),
    consecutive_ranks!(0-9 diamonds),
    consecutive_ranks!(0-9 hearts),
    consecutive_ranks!(0-9 spades),
    consecutive_ranks!(1-10 clubs),
    consecutive_ranks!(1-10 diamonds),
    consecutive_ranks!(1-10 hearts),
    consecutive_ranks!(1-10 spades),
    consecutive_ranks!(2-11 clubs),
    consecutive_ranks!(2-11 diamonds),
    consecutive_ranks!(2-11 hearts),
    consecutive_ranks!(2-11 spades),
    consecutive_ranks!(3-12 clubs),
    consecutive_ranks!(3-12 diamonds),
    consecutive_ranks!(3-12 hearts),
    consecutive_ranks!(3-12 spades),
    consecutive_ranks!(0-8 clubs),
    consecutive_ranks!(0-8 diamonds),
    consecutive_ranks!(0-8 hearts),
    consecutive_ranks!(0-8 spades),
    consecutive_ranks!(1-9 clubs),
    consecutive_ranks!(1-9 diamonds),
    consecutive_ranks!(1-9 hearts),
    consecutive_ranks!(1-9 spades),
    consecutive_ranks!(2-10 clubs),
    consecutive_ranks!(2-10 diamonds),
    consecutive_ranks!(2-10 hearts),
    consecutive_ranks!(2-10 spades),
    consecutive_ranks!(3-11 clubs),
    consecutive_ranks!(3-11 diamonds),
    consecutive_ranks!(3-11 hearts),
    consecutive_ranks!(3-11 spades),
    consecutive_ranks!(4-12 clubs),
    consecutive_ranks!(4-12 diamonds),
    consecutive_ranks!(4-12 hearts),
    consecutive_ranks!(4-12 spades),
    CLUBS_EVEN_PLUS_Q,
    DIAMONDS_EVEN_PLUS_Q,
    HEARTS_EVEN_PLUS_Q,
    SPADES_EVEN_PLUS_Q,
    CLUBS_EVEN_SANS_Q,
    DIAMONDS_EVEN_SANS_Q,
    HEARTS_EVEN_SANS_Q,
    SPADES_EVEN_SANS_Q,
    CLUBS_ODD_PLUS_K_AND_J,
    DIAMONDS_ODD_PLUS_K_AND_J,
    HEARTS_ODD_PLUS_K_AND_J,
    SPADES_ODD_PLUS_K_AND_J,
    CLUBS_ODD_SANS_K_AND_J,
    DIAMONDS_ODD_SANS_K_AND_J,
    HEARTS_ODD_SANS_K_AND_J,
    SPADES_ODD_SANS_K_AND_J,
    consecutive_ranks!(0-7 clubs),
    consecutive_ranks!(0-7 diamonds),
    consecutive_ranks!(0-7 hearts),
    consecutive_ranks!(0-7 spades),
    consecutive_ranks!(1-8 clubs),
    consecutive_ranks!(1-8 diamonds),
    consecutive_ranks!(1-8 hearts),
    consecutive_ranks!(1-8 spades),
    consecutive_ranks!(2-9 clubs),
    consecutive_ranks!(2-9 diamonds),
    consecutive_ranks!(2-9 hearts),
    consecutive_ranks!(2-9 spades),
    consecutive_ranks!(3-10 clubs),
    consecutive_ranks!(3-10 diamonds),
    consecutive_ranks!(3-10 hearts),
    consecutive_ranks!(3-10 spades),
    consecutive_ranks!(4-11 clubs),
    consecutive_ranks!(4-11 diamonds),
    consecutive_ranks!(4-11 hearts),
    consecutive_ranks!(4-11 spades),
    consecutive_ranks!(5-12 clubs),
    consecutive_ranks!(5-12 diamonds),
    consecutive_ranks!(5-12 hearts),
    consecutive_ranks!(5-12 spades),
    consecutive_ranks!(0-6 clubs),
    consecutive_ranks!(0-6 diamonds),
    consecutive_ranks!(0-6 hearts),
    consecutive_ranks!(0-6 spades),
    consecutive_ranks!(1-7 clubs),
    consecutive_ranks!(1-7 diamonds),
    consecutive_ranks!(1-7 hearts),
    consecutive_ranks!(1-7 spades),
    consecutive_ranks!(2-8 clubs),
    consecutive_ranks!(2-8 diamonds),
    consecutive_ranks!(2-8 hearts),
    consecutive_ranks!(2-8 spades),
    consecutive_ranks!(3-9 clubs),
    consecutive_ranks!(3-9 diamonds),
    consecutive_ranks!(3-9 hearts),
    consecutive_ranks!(3-9 spades),
    consecutive_ranks!(4-10 clubs),
    consecutive_ranks!(4-10 diamonds),
    consecutive_ranks!(4-10 hearts),
    consecutive_ranks!(4-10 spades),
    consecutive_ranks!(5-11 clubs),
    consecutive_ranks!(5-11 diamonds),
    consecutive_ranks!(5-11 hearts),
    consecutive_ranks!(5-11 spades),
    consecutive_ranks!(6-12 clubs),
    consecutive_ranks!(6-12 diamonds),
    consecutive_ranks!(6-12 hearts),
    consecutive_ranks!(6-12 spades),
    consecutive_ranks!(0-5 clubs),
    consecutive_ranks!(0-5 diamonds),
    consecutive_ranks!(0-5 hearts),
    consecutive_ranks!(0-5 spades),
    consecutive_ranks!(1-6 clubs),
    consecutive_ranks!(1-6 diamonds),
    consecutive_ranks!(1-6 hearts),
    consecutive_ranks!(1-6 spades),
    consecutive_ranks!(2-7 clubs),
    consecutive_ranks!(2-7 diamonds),
    consecutive_ranks!(2-7 hearts),
    consecutive_ranks!(2-7 spades),
    consecutive_ranks!(3-8 clubs),
    consecutive_ranks!(3-8 diamonds),
    consecutive_ranks!(3-8 hearts),
    consecutive_ranks!(3-8 spades),
    consecutive_ranks!(4-9 clubs),
    consecutive_ranks!(4-9 diamonds),
    consecutive_ranks!(4-9 hearts),
    consecutive_ranks!(4-9 spades),
    consecutive_ranks!(5-10 clubs),
    consecutive_ranks!(5-10 diamonds),
    consecutive_ranks!(5-10 hearts),
    consecutive_ranks!(5-10 spades),
    consecutive_ranks!(6-11 clubs),
    consecutive_ranks!(6-11 diamonds),
    consecutive_ranks!(6-11 hearts),
    consecutive_ranks!(6-11 spades),
    consecutive_ranks!(7-12 clubs),
    consecutive_ranks!(7-12 diamonds),
    consecutive_ranks!(7-12 hearts),
    consecutive_ranks!(7-12 spades),
    consecutive_ranks!(0-4 clubs),
    consecutive_ranks!(0-4 diamonds),
    consecutive_ranks!(0-4 hearts),
    consecutive_ranks!(0-4 spades),
    consecutive_ranks!(1-5 clubs),
    consecutive_ranks!(1-5 diamonds),
    consecutive_ranks!(1-5 hearts),
    consecutive_ranks!(1-5 spades),
    consecutive_ranks!(2-6 clubs),
    consecutive_ranks!(2-6 diamonds),
    consecutive_ranks!(2-6 hearts),
    consecutive_ranks!(2-6 spades),
    consecutive_ranks!(3-7 clubs),
    consecutive_ranks!(3-7 diamonds),
    consecutive_ranks!(3-7 hearts),
    consecutive_ranks!(3-7 spades),
    consecutive_ranks!(4-8 clubs),
    consecutive_ranks!(4-8 diamonds),
    consecutive_ranks!(4-8 hearts),
    consecutive_ranks!(4-8 spades),
    consecutive_ranks!(5-9 clubs),
    consecutive_ranks!(5-9 diamonds),
    consecutive_ranks!(5-9 hearts),
    consecutive_ranks!(5-9 spades),
    consecutive_ranks!(6-10 clubs),
    consecutive_ranks!(6-10 diamonds),
    consecutive_ranks!(6-10 hearts),
    consecutive_ranks!(6-10 spades),
    consecutive_ranks!(7-11 clubs),
    consecutive_ranks!(7-11 diamonds),
    consecutive_ranks!(7-11 hearts),
    consecutive_ranks!(7-11 spades),
    consecutive_ranks!(8-12 clubs),
    consecutive_ranks!(8-12 diamonds),
    consecutive_ranks!(8-12 hearts),
    consecutive_ranks!(8-12 spades),
    consecutive_ranks!(0-3 clubs),
    consecutive_ranks!(0-3 diamonds),
    consecutive_ranks!(0-3 hearts),
    consecutive_ranks!(0-3 spades),
    consecutive_ranks!(1-4 clubs),
    consecutive_ranks!(1-4 diamonds),
    consecutive_ranks!(1-4 hearts),
    consecutive_ranks!(1-4 spades),
    consecutive_ranks!(2-5 clubs),
    consecutive_ranks!(2-5 diamonds),
    consecutive_ranks!(2-5 hearts),
    consecutive_ranks!(2-5 spades),
    consecutive_ranks!(3-6 clubs),
    consecutive_ranks!(3-6 diamonds),
    consecutive_ranks!(3-6 hearts),
    consecutive_ranks!(3-6 spades),
    consecutive_ranks!(4-7 clubs),
    consecutive_ranks!(4-7 diamonds),
    consecutive_ranks!(4-7 hearts),
    consecutive_ranks!(4-7 spades),
    consecutive_ranks!(5-8 clubs),
    consecutive_ranks!(5-8 diamonds),
    consecutive_ranks!(5-8 hearts),
    consecutive_ranks!(5-8 spades),
    consecutive_ranks!(6-9 clubs),
    consecutive_ranks!(6-9 diamonds),
    consecutive_ranks!(6-9 hearts),
    consecutive_ranks!(6-9 spades),
    consecutive_ranks!(7-10 clubs),
    consecutive_ranks!(7-10 diamonds),
    consecutive_ranks!(7-10 hearts),
    consecutive_ranks!(7-10 spades),
    consecutive_ranks!(8-11 clubs),
    consecutive_ranks!(8-11 diamonds),
    consecutive_ranks!(8-11 hearts),
    consecutive_ranks!(8-11 spades),
    consecutive_ranks!(9-12 clubs),
    consecutive_ranks!(9-12 diamonds),
    consecutive_ranks!(9-12 hearts),
    consecutive_ranks!(9-12 spades),
    CLUBS_FACE_FLAGS,
    DIAMONDS_FACE_FLAGS,
    HEARTS_FACE_FLAGS,
    SPADES_FACE_FLAGS,
    consecutive_ranks!(0-2 clubs),
    consecutive_ranks!(0-2 diamonds),
    consecutive_ranks!(0-2 hearts),
    consecutive_ranks!(0-2 spades),
    consecutive_ranks!(1-3 clubs),
    consecutive_ranks!(1-3 diamonds),
    consecutive_ranks!(1-3 hearts),
    consecutive_ranks!(1-3 spades),
    consecutive_ranks!(2-4 clubs),
    consecutive_ranks!(2-4 diamonds),
    consecutive_ranks!(2-4 hearts),
    consecutive_ranks!(2-4 spades),
    consecutive_ranks!(3-5 clubs),
    consecutive_ranks!(3-5 diamonds),
    consecutive_ranks!(3-5 hearts),
    consecutive_ranks!(3-5 spades),
    consecutive_ranks!(4-6 clubs),
    consecutive_ranks!(4-6 diamonds),
    consecutive_ranks!(4-6 hearts),
    consecutive_ranks!(4-6 spades),
    consecutive_ranks!(5-7 clubs),
    consecutive_ranks!(5-7 diamonds),
    consecutive_ranks!(5-7 hearts),
    consecutive_ranks!(5-7 spades),
    consecutive_ranks!(6-8 clubs),
    consecutive_ranks!(6-8 diamonds),
    consecutive_ranks!(6-8 hearts),
    consecutive_ranks!(6-8 spades),
    consecutive_ranks!(7-9 clubs),
    consecutive_ranks!(7-9 diamonds),
    consecutive_ranks!(7-9 hearts),
    consecutive_ranks!(7-9 spades),
    consecutive_ranks!(8-10 clubs),
    consecutive_ranks!(8-10 diamonds),
    consecutive_ranks!(8-10 hearts),
    consecutive_ranks!(8-10 spades),
    consecutive_ranks!(9-11 clubs),
    consecutive_ranks!(9-11 diamonds),
    consecutive_ranks!(9-11 hearts),
    consecutive_ranks!(9-11 spades),
    /* These are the face cards. I'm leaving these here for completeness.
    consecutive_ranks!(10-12 clubs),
    consecutive_ranks!(10-12 diamonds),
    consecutive_ranks!(10-12 hearts),
    consecutive_ranks!(10-12 spades),
    */
    consecutive_ranks!(0-1 clubs),
    consecutive_ranks!(0-1 diamonds),
    consecutive_ranks!(0-1 hearts),
    consecutive_ranks!(0-1 spades),
    consecutive_ranks!(1-2 clubs),
    consecutive_ranks!(1-2 diamonds),
    consecutive_ranks!(1-2 hearts),
    consecutive_ranks!(1-2 spades),
    consecutive_ranks!(2-3 clubs),
    consecutive_ranks!(2-3 diamonds),
    consecutive_ranks!(2-3 hearts),
    consecutive_ranks!(2-3 spades),
    consecutive_ranks!(3-4 clubs),
    consecutive_ranks!(3-4 diamonds),
    consecutive_ranks!(3-4 hearts),
    consecutive_ranks!(3-4 spades),
    consecutive_ranks!(4-5 clubs),
    consecutive_ranks!(4-5 diamonds),
    consecutive_ranks!(4-5 hearts),
    consecutive_ranks!(4-5 spades),
    consecutive_ranks!(5-6 clubs),
    consecutive_ranks!(5-6 diamonds),
    consecutive_ranks!(5-6 hearts),
    consecutive_ranks!(5-6 spades),
    consecutive_ranks!(6-7 clubs),
    consecutive_ranks!(6-7 diamonds),
    consecutive_ranks!(6-7 hearts),
    consecutive_ranks!(6-7 spades),
    consecutive_ranks!(7-8 clubs),
    consecutive_ranks!(7-8 diamonds),
    consecutive_ranks!(7-8 hearts),
    consecutive_ranks!(7-8 spades),
    consecutive_ranks!(8-9 clubs),
    consecutive_ranks!(8-9 diamonds),
    consecutive_ranks!(8-9 hearts),
    consecutive_ranks!(8-9 spades),
    consecutive_ranks!(9-10 clubs),
    consecutive_ranks!(9-10 diamonds),
    consecutive_ranks!(9-10 hearts),
    consecutive_ranks!(9-10 spades),
    consecutive_ranks!(10-11 clubs),
    consecutive_ranks!(10-11 diamonds),
    consecutive_ranks!(10-11 hearts),
    consecutive_ranks!(10-11 spades),
    consecutive_ranks!(11-12 clubs),
    consecutive_ranks!(11-12 diamonds),
    consecutive_ranks!(11-12 hearts),
    consecutive_ranks!(11-12 spades),
    1 << 0,
    1 << 1,
    1 << 2,
    1 << 3,
    1 << 4,
    1 << 5,
    1 << 6,
    1 << 7,
    1 << 8,
    1 << 9,
    1 << 10,
    1 << 11,
    1 << 12,
    1 << 13,
    1 << 14,
    1 << 15,
    1 << 16,
    1 << 17,
    1 << 18,
    1 << 19,
    1 << 20,
    1 << 21,
    1 << 22,
    1 << 23,
    1 << 24,
    1 << 25,
    1 << 26,
    1 << 27,
    1 << 28,
    1 << 29,
    1 << 30,
    1 << 31,
    1 << 32,
    1 << 33,
    1 << 34,
    1 << 35,
    1 << 36,
    1 << 37,
    1 << 38,
    1 << 39,
    1 << 40,
    1 << 41,
    1 << 42,
    1 << 43,
    1 << 44,
    1 << 45,
    1 << 46,
    1 << 47,
    1 << 48,
    1 << 49,
    1 << 50,
    1 << 51,
];

fn get_special_subsets(all_special_flags: &[u64], card_flags: CardFlags) -> Vec<u64> {
    let original_flags = card_flags.0;

    let mut subsets = Vec::new();

    let mut tracking_flags = 0;
    if original_flags == 0 {
        subsets.push(0);
    } else {
        for &f in all_special_flags.iter() {
            if tracking_flags & f != f {
                if original_flags & f == f {
                    tracking_flags |= f;
                    subsets.push(f);

                    if tracking_flags & original_flags == original_flags {
                        break;
                    }
                }
            }
        }
    }

    optimize_set_cover(all_special_flags, subsets)
}

fn optimize_set_cover(all_special_flags: &[u64], sets: Vec<u64>) -> Vec<u64> {
    //TODO see if `HashMap`s or `BTreeMap`s something would be noticably faster
    let universe = sets.iter().fold(0, |acc, s| acc | s);

    let mut left_to_cover = universe;

    let mut unchosen_sets = get_unchosen_sets(all_special_flags, universe);

    let mut output = Vec::with_capacity(unchosen_sets.capacity());

    while left_to_cover != 0 {
        if output.len() == sets.len() {
            return sets;
        }

        let (i, next_set) = maximally_covering_subset(&unchosen_sets, left_to_cover);
        i.map(|i| unchosen_sets.remove(i));
        output.push(next_set);
        left_to_cover &= !next_set;
        test_println!("output: {:?}", card_bin_formatted_vec!(output));
    }

    output
}

fn get_unchosen_sets(all_special_flags: &[u64], universe: u64) -> Vec<u64> {
    let mut output = Vec::new();
    for &flags in all_special_flags.iter() {
        if universe & flags == flags {
            output.push(flags);
        }
    }
    output
}

//the set from `sets` that covers the most extra area of `target`.
fn maximally_covering_subset(sets: &Vec<u64>, target: u64) -> (Option<usize>, u64) {
    let mut previously_covered: u64 = 0;
    let mut previously_covered_index = None;
    for (i, set) in sets.iter().enumerate() {
        let newly_covered = target & set;
        if newly_covered.count_ones() > previously_covered.count_ones() {
            previously_covered = newly_covered;
            previously_covered_index = Some(i);
        }
    }

    (previously_covered_index, previously_covered)
}

impl fmt::Display for CardFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let subsets = get_special_subsets(&SPECIAL_FLAGS, *self);

        test_println!("subsets: {:?}", card_bin_formatted_vec!(subsets));
        write!(f, "{}", map_sentence_list(&subsets, write_card_set_str))
    }
}

const CARD_FLAGS_DISPLAY_FALLBACK: &'static str = "the selected cards";

use std::borrow::Cow;
fn write_card_set_str<'f, 's>(flags: &'f u64) -> Cow<'s, str> {
    macro_rules! rank_result {
        ($index:expr) => {{
            format!("the {}s", get_rank_str($index)).into()
        }};
        ($index:expr, black) => {{
            format!("the black {}s", get_rank_str($index)).into()
        }};
        ($index:expr, red) => {{
            format!("the red {}s", get_rank_str($index)).into()
        }};
    }
    macro_rules! consecutive_ranks_result {
        ($start:expr => $end:expr, clubs) => {{
            format!(
                "{} to {} of clubs",
                get_rank_str($start),
                get_rank_str($end)
            )
            .into()
        }};
        ($start:expr => $end:expr, diamonds) => {{
            format!(
                "{} to {} of diamonds",
                get_rank_str($start),
                get_rank_str($end)
            )
            .into()
        }};
        ($start:expr => $end:expr, hearts) => {{
            format!(
                "{} to {} of hearts",
                get_rank_str($start),
                get_rank_str($end)
            )
            .into()
        }};
        ($start:expr => $end:expr, spades) => {{
            format!(
                "{} to {} of spades",
                get_rank_str($start),
                get_rank_str($end)
            )
            .into()
        }};
    }
    match *flags {
        0 => "{}".into(),
        ALL_FLAGS => "any card".into(),
        //Colours
        BLACK_FLAGS => "the black cards".into(),
        RED_FLAGS => "the red cards".into(),
        //Suits
        CLUBS_FLAGS => "the clubs".into(),
        DIAMONDS_FLAGS => "the diamonds".into(),
        HEARTS_FLAGS => "the hearts".into(),
        SPADES_FLAGS => "the spades".into(),

        //Ranks
        rank_pattern!(0) => rank_result!(0),
        rank_pattern!(1) => rank_result!(1),
        rank_pattern!(2) => rank_result!(2),
        rank_pattern!(3) => rank_result!(3),
        rank_pattern!(4) => rank_result!(4),
        rank_pattern!(5) => rank_result!(5),
        rank_pattern!(6) => rank_result!(6),
        rank_pattern!(7) => rank_result!(7),
        rank_pattern!(8) => rank_result!(8),
        rank_pattern!(9) => rank_result!(9),
        rank_pattern!(10) => rank_result!(10),
        rank_pattern!(11) => rank_result!(11),
        rank_pattern!(12) => rank_result!(12),

        rank_pattern!(0 black) => rank_result!(0, black),
        rank_pattern!(1 black) => rank_result!(1, black),
        rank_pattern!(2 black) => rank_result!(2, black),
        rank_pattern!(3 black) => rank_result!(3, black),
        rank_pattern!(4 black) => rank_result!(4, black),
        rank_pattern!(5 black) => rank_result!(5, black),
        rank_pattern!(6 black) => rank_result!(6, black),
        rank_pattern!(7 black) => rank_result!(7, black),
        rank_pattern!(8 black) => rank_result!(8, black),
        rank_pattern!(9 black) => rank_result!(9, black),
        rank_pattern!(10 black) => rank_result!(10, black),
        rank_pattern!(11 black) => rank_result!(11, black),
        rank_pattern!(12 black) => rank_result!(12, black),

        rank_pattern!(0 red) => rank_result!(0, red),
        rank_pattern!(1 red) => rank_result!(1, red),
        rank_pattern!(2 red) => rank_result!(2, red),
        rank_pattern!(3 red) => rank_result!(3, red),
        rank_pattern!(4 red) => rank_result!(4, red),
        rank_pattern!(5 red) => rank_result!(5, red),
        rank_pattern!(6 red) => rank_result!(6, red),
        rank_pattern!(7 red) => rank_result!(7, red),
        rank_pattern!(8 red) => rank_result!(8, red),
        rank_pattern!(9 red) => rank_result!(9, red),
        rank_pattern!(10 red) => rank_result!(10, red),
        rank_pattern!(11 red) => rank_result!(11, red),
        rank_pattern!(12 red) => rank_result!(12, red),

        consecutive_ranks!(0-11 clubs) => consecutive_ranks_result!(0=>11, clubs),
        consecutive_ranks!(0-11 diamonds) => consecutive_ranks_result!(0=>11, diamonds),
        consecutive_ranks!(0-11 hearts) => consecutive_ranks_result!(0=>11, hearts),
        consecutive_ranks!(0-11 spades) => consecutive_ranks_result!(0=>11, spades),
        consecutive_ranks!(1-12 clubs) => consecutive_ranks_result!(1=>12, clubs),
        consecutive_ranks!(1-12 diamonds) => consecutive_ranks_result!(1=>12, diamonds),
        consecutive_ranks!(1-12 hearts) => consecutive_ranks_result!(1=>12, hearts),
        consecutive_ranks!(1-12 spades) => consecutive_ranks_result!(1=>12, spades),
        consecutive_ranks!(0-10 clubs) => consecutive_ranks_result!(0=>10, clubs),
        consecutive_ranks!(0-10 diamonds) => consecutive_ranks_result!(0=>10, diamonds),
        consecutive_ranks!(0-10 hearts) => consecutive_ranks_result!(0=>10, hearts),
        consecutive_ranks!(0-10 spades) => consecutive_ranks_result!(0=>10, spades),
        consecutive_ranks!(1-11 clubs) => consecutive_ranks_result!(1=>11, clubs),
        consecutive_ranks!(1-11 diamonds) => consecutive_ranks_result!(1=>11, diamonds),
        consecutive_ranks!(1-11 hearts) => consecutive_ranks_result!(1=>11, hearts),
        consecutive_ranks!(1-11 spades) => consecutive_ranks_result!(1=>11, spades),
        consecutive_ranks!(2-12 clubs) => consecutive_ranks_result!(2=>12, clubs),
        consecutive_ranks!(2-12 diamonds) => consecutive_ranks_result!(2=>12, diamonds),
        consecutive_ranks!(2-12 hearts) => consecutive_ranks_result!(2=>12, hearts),
        consecutive_ranks!(2-12 spades) => consecutive_ranks_result!(2=>12, spades),
        consecutive_ranks!(0-9 clubs) => consecutive_ranks_result!(0=>9, clubs),
        consecutive_ranks!(0-9 diamonds) => consecutive_ranks_result!(0=>9, diamonds),
        consecutive_ranks!(0-9 hearts) => consecutive_ranks_result!(0=>9, hearts),
        consecutive_ranks!(0-9 spades) => consecutive_ranks_result!(0=>9, spades),
        consecutive_ranks!(1-10 clubs) => consecutive_ranks_result!(1=>10, clubs),
        consecutive_ranks!(1-10 diamonds) => consecutive_ranks_result!(1=>10, diamonds),
        consecutive_ranks!(1-10 hearts) => consecutive_ranks_result!(1=>10, hearts),
        consecutive_ranks!(1-10 spades) => consecutive_ranks_result!(1=>10, spades),
        consecutive_ranks!(2-11 clubs) => consecutive_ranks_result!(2=>11, clubs),
        consecutive_ranks!(2-11 diamonds) => consecutive_ranks_result!(2=>11, diamonds),
        consecutive_ranks!(2-11 hearts) => consecutive_ranks_result!(2=>11, hearts),
        consecutive_ranks!(2-11 spades) => consecutive_ranks_result!(2=>11, spades),
        consecutive_ranks!(3-12 clubs) => consecutive_ranks_result!(3=>12, clubs),
        consecutive_ranks!(3-12 diamonds) => consecutive_ranks_result!(3=>12, diamonds),
        consecutive_ranks!(3-12 hearts) => consecutive_ranks_result!(3=>12, hearts),
        consecutive_ranks!(3-12 spades) => consecutive_ranks_result!(3=>12, spades),

        consecutive_ranks!(0-8 clubs) => consecutive_ranks_result!(0=>8, clubs),
        consecutive_ranks!(0-8 diamonds) => consecutive_ranks_result!(0=>8, diamonds),
        consecutive_ranks!(0-8 hearts) => consecutive_ranks_result!(0=>8, hearts),
        consecutive_ranks!(0-8 spades) => consecutive_ranks_result!(0=>8, spades),
        consecutive_ranks!(1-9 clubs) => consecutive_ranks_result!(1=>9, clubs),
        consecutive_ranks!(1-9 diamonds) => consecutive_ranks_result!(1=>9, diamonds),
        consecutive_ranks!(1-9 hearts) => consecutive_ranks_result!(1=>9, hearts),
        consecutive_ranks!(1-9 spades) => consecutive_ranks_result!(1=>9, spades),
        consecutive_ranks!(2-10 clubs) => consecutive_ranks_result!(2=>10, clubs),
        consecutive_ranks!(2-10 diamonds) => consecutive_ranks_result!(2=>10, diamonds),
        consecutive_ranks!(2-10 hearts) => consecutive_ranks_result!(2=>10, hearts),
        consecutive_ranks!(2-10 spades) => consecutive_ranks_result!(2=>10, spades),
        consecutive_ranks!(3-11 clubs) => consecutive_ranks_result!(3=>11, clubs),
        consecutive_ranks!(3-11 diamonds) => consecutive_ranks_result!(3=>11, diamonds),
        consecutive_ranks!(3-11 hearts) => consecutive_ranks_result!(3=>11, hearts),
        consecutive_ranks!(3-11 spades) => consecutive_ranks_result!(3=>11, spades),
        consecutive_ranks!(4-12 clubs) => consecutive_ranks_result!(4=>12, clubs),
        consecutive_ranks!(4-12 diamonds) => consecutive_ranks_result!(4=>12, diamonds),
        consecutive_ranks!(4-12 hearts) => consecutive_ranks_result!(4=>12, hearts),
        consecutive_ranks!(4-12 spades) => consecutive_ranks_result!(4=>12, spades),

        CLUBS_EVEN_SANS_Q => "the even clubs (sans queen)".into(),
        DIAMONDS_EVEN_SANS_Q => "the even diamonds (sans queen)".into(),
        HEARTS_EVEN_SANS_Q => "the even hearts (sans queen)".into(),
        SPADES_EVEN_SANS_Q => "the even spades (sans queen)".into(),

        CLUBS_EVEN_PLUS_Q => "the even clubs (including queen)".into(),
        DIAMONDS_EVEN_PLUS_Q => "the even diamonds (including queen)".into(),
        HEARTS_EVEN_PLUS_Q => "the even hearts (including queen)".into(),
        SPADES_EVEN_PLUS_Q => "the even spades (including queen)".into(),

        CLUBS_ODD_SANS_K_AND_J => "the odd clubs (sans the king and jack)".into(),
        DIAMONDS_ODD_SANS_K_AND_J => "the odd diamonds (sans the king and jack)".into(),
        HEARTS_ODD_SANS_K_AND_J => "the odd hearts (sans the king and jack)".into(),
        SPADES_ODD_SANS_K_AND_J => "the odd spades (sans the king and jack)".into(),

        CLUBS_ODD_PLUS_K_AND_J => "the odd clubs (including the king and jack)".into(),
        DIAMONDS_ODD_PLUS_K_AND_J => "the odd diamonds (including the king and jack)".into(),
        HEARTS_ODD_PLUS_K_AND_J => "the odd hearts (including the king and jack)".into(),
        SPADES_ODD_PLUS_K_AND_J => "the odd spades (including the king and jack)".into(),

        consecutive_ranks!(0-7 clubs) => consecutive_ranks_result!(0=>7, clubs),
        consecutive_ranks!(0-7 diamonds) => consecutive_ranks_result!(0=>7, diamonds),
        consecutive_ranks!(0-7 hearts) => consecutive_ranks_result!(0=>7, hearts),
        consecutive_ranks!(0-7 spades) => consecutive_ranks_result!(0=>7, spades),
        consecutive_ranks!(1-8 clubs) => consecutive_ranks_result!(1=>8, clubs),
        consecutive_ranks!(1-8 diamonds) => consecutive_ranks_result!(1=>8, diamonds),
        consecutive_ranks!(1-8 hearts) => consecutive_ranks_result!(1=>8, hearts),
        consecutive_ranks!(1-8 spades) => consecutive_ranks_result!(1=>8, spades),
        consecutive_ranks!(2-9 clubs) => consecutive_ranks_result!(2=>9, clubs),
        consecutive_ranks!(2-9 diamonds) => consecutive_ranks_result!(2=>9, diamonds),
        consecutive_ranks!(2-9 hearts) => consecutive_ranks_result!(2=>9, hearts),
        consecutive_ranks!(2-9 spades) => consecutive_ranks_result!(2=>9, spades),
        consecutive_ranks!(3-10 clubs) => consecutive_ranks_result!(3=>10, clubs),
        consecutive_ranks!(3-10 diamonds) => consecutive_ranks_result!(3=>10, diamonds),
        consecutive_ranks!(3-10 hearts) => consecutive_ranks_result!(3=>10, hearts),
        consecutive_ranks!(3-10 spades) => consecutive_ranks_result!(3=>10, spades),
        consecutive_ranks!(4-11 clubs) => consecutive_ranks_result!(4=>11, clubs),
        consecutive_ranks!(4-11 diamonds) => consecutive_ranks_result!(4=>11, diamonds),
        consecutive_ranks!(4-11 hearts) => consecutive_ranks_result!(4=>11, hearts),
        consecutive_ranks!(4-11 spades) => consecutive_ranks_result!(4=>11, spades),
        consecutive_ranks!(5-12 clubs) => consecutive_ranks_result!(5=>12, clubs),
        consecutive_ranks!(5-12 diamonds) => consecutive_ranks_result!(5=>12, diamonds),
        consecutive_ranks!(5-12 hearts) => consecutive_ranks_result!(5=>12, hearts),
        consecutive_ranks!(5-12 spades) => consecutive_ranks_result!(5=>12, spades),
        consecutive_ranks!(0-6 clubs) => consecutive_ranks_result!(0=>6, clubs),
        consecutive_ranks!(0-6 diamonds) => consecutive_ranks_result!(0=>6, diamonds),
        consecutive_ranks!(0-6 hearts) => consecutive_ranks_result!(0=>6, hearts),
        consecutive_ranks!(0-6 spades) => consecutive_ranks_result!(0=>6, spades),
        consecutive_ranks!(1-7 clubs) => consecutive_ranks_result!(1=>7, clubs),
        consecutive_ranks!(1-7 diamonds) => consecutive_ranks_result!(1=>7, diamonds),
        consecutive_ranks!(1-7 hearts) => consecutive_ranks_result!(1=>7, hearts),
        consecutive_ranks!(1-7 spades) => consecutive_ranks_result!(1=>7, spades),
        consecutive_ranks!(2-8 clubs) => consecutive_ranks_result!(2=>8, clubs),
        consecutive_ranks!(2-8 diamonds) => consecutive_ranks_result!(2=>8, diamonds),
        consecutive_ranks!(2-8 hearts) => consecutive_ranks_result!(2=>8, hearts),
        consecutive_ranks!(2-8 spades) => consecutive_ranks_result!(2=>8, spades),
        consecutive_ranks!(3-9 clubs) => consecutive_ranks_result!(3=>9, clubs),
        consecutive_ranks!(3-9 diamonds) => consecutive_ranks_result!(3=>9, diamonds),
        consecutive_ranks!(3-9 hearts) => consecutive_ranks_result!(3=>9, hearts),
        consecutive_ranks!(3-9 spades) => consecutive_ranks_result!(3=>9, spades),
        consecutive_ranks!(4-10 clubs) => consecutive_ranks_result!(4=>10, clubs),
        consecutive_ranks!(4-10 diamonds) => consecutive_ranks_result!(4=>10, diamonds),
        consecutive_ranks!(4-10 hearts) => consecutive_ranks_result!(4=>10, hearts),
        consecutive_ranks!(4-10 spades) => consecutive_ranks_result!(4=>10, spades),
        consecutive_ranks!(5-11 clubs) => consecutive_ranks_result!(5=>11, clubs),
        consecutive_ranks!(5-11 diamonds) => consecutive_ranks_result!(5=>11, diamonds),
        consecutive_ranks!(5-11 hearts) => consecutive_ranks_result!(5=>11, hearts),
        consecutive_ranks!(5-11 spades) => consecutive_ranks_result!(5=>11, spades),
        consecutive_ranks!(6-12 clubs) => consecutive_ranks_result!(6=>12, clubs),
        consecutive_ranks!(6-12 diamonds) => consecutive_ranks_result!(6=>12, diamonds),
        consecutive_ranks!(6-12 hearts) => consecutive_ranks_result!(6=>12, hearts),
        consecutive_ranks!(6-12 spades) => consecutive_ranks_result!(6=>12, spades),
        consecutive_ranks!(0-5 clubs) => consecutive_ranks_result!(0=>5, clubs),
        consecutive_ranks!(0-5 diamonds) => consecutive_ranks_result!(0=>5, diamonds),
        consecutive_ranks!(0-5 hearts) => consecutive_ranks_result!(0=>5, hearts),
        consecutive_ranks!(0-5 spades) => consecutive_ranks_result!(0=>5, spades),
        consecutive_ranks!(1-6 clubs) => consecutive_ranks_result!(1=>6, clubs),
        consecutive_ranks!(1-6 diamonds) => consecutive_ranks_result!(1=>6, diamonds),
        consecutive_ranks!(1-6 hearts) => consecutive_ranks_result!(1=>6, hearts),
        consecutive_ranks!(1-6 spades) => consecutive_ranks_result!(1=>6, spades),
        consecutive_ranks!(2-7 clubs) => consecutive_ranks_result!(2=>7, clubs),
        consecutive_ranks!(2-7 diamonds) => consecutive_ranks_result!(2=>7, diamonds),
        consecutive_ranks!(2-7 hearts) => consecutive_ranks_result!(2=>7, hearts),
        consecutive_ranks!(2-7 spades) => consecutive_ranks_result!(2=>7, spades),
        consecutive_ranks!(3-8 clubs) => consecutive_ranks_result!(3=>8, clubs),
        consecutive_ranks!(3-8 diamonds) => consecutive_ranks_result!(3=>8, diamonds),
        consecutive_ranks!(3-8 hearts) => consecutive_ranks_result!(3=>8, hearts),
        consecutive_ranks!(3-8 spades) => consecutive_ranks_result!(3=>8, spades),
        consecutive_ranks!(4-9 clubs) => consecutive_ranks_result!(4=>9, clubs),
        consecutive_ranks!(4-9 diamonds) => consecutive_ranks_result!(4=>9, diamonds),
        consecutive_ranks!(4-9 hearts) => consecutive_ranks_result!(4=>9, hearts),
        consecutive_ranks!(4-9 spades) => consecutive_ranks_result!(4=>9, spades),
        consecutive_ranks!(5-10 clubs) => consecutive_ranks_result!(5=>10, clubs),
        consecutive_ranks!(5-10 diamonds) => consecutive_ranks_result!(5=>10, diamonds),
        consecutive_ranks!(5-10 hearts) => consecutive_ranks_result!(5=>10, hearts),
        consecutive_ranks!(5-10 spades) => consecutive_ranks_result!(5=>10, spades),
        consecutive_ranks!(6-11 clubs) => consecutive_ranks_result!(6=>11, clubs),
        consecutive_ranks!(6-11 diamonds) => consecutive_ranks_result!(6=>11, diamonds),
        consecutive_ranks!(6-11 hearts) => consecutive_ranks_result!(6=>11, hearts),
        consecutive_ranks!(6-11 spades) => consecutive_ranks_result!(6=>11, spades),
        consecutive_ranks!(7-12 clubs) => consecutive_ranks_result!(7=>12, clubs),
        consecutive_ranks!(7-12 diamonds) => consecutive_ranks_result!(7=>12, diamonds),
        consecutive_ranks!(7-12 hearts) => consecutive_ranks_result!(7=>12, hearts),
        consecutive_ranks!(7-12 spades) => consecutive_ranks_result!(7=>12, spades),
        consecutive_ranks!(0-4 clubs) => consecutive_ranks_result!(0=>4, clubs),
        consecutive_ranks!(0-4 diamonds) => consecutive_ranks_result!(0=>4, diamonds),
        consecutive_ranks!(0-4 hearts) => consecutive_ranks_result!(0=>4, hearts),
        consecutive_ranks!(0-4 spades) => consecutive_ranks_result!(0=>4, spades),
        consecutive_ranks!(1-5 clubs) => consecutive_ranks_result!(1=>5, clubs),
        consecutive_ranks!(1-5 diamonds) => consecutive_ranks_result!(1=>5, diamonds),
        consecutive_ranks!(1-5 hearts) => consecutive_ranks_result!(1=>5, hearts),
        consecutive_ranks!(1-5 spades) => consecutive_ranks_result!(1=>5, spades),
        consecutive_ranks!(2-6 clubs) => consecutive_ranks_result!(2=>6, clubs),
        consecutive_ranks!(2-6 diamonds) => consecutive_ranks_result!(2=>6, diamonds),
        consecutive_ranks!(2-6 hearts) => consecutive_ranks_result!(2=>6, hearts),
        consecutive_ranks!(2-6 spades) => consecutive_ranks_result!(2=>6, spades),
        consecutive_ranks!(3-7 clubs) => consecutive_ranks_result!(3=>7, clubs),
        consecutive_ranks!(3-7 diamonds) => consecutive_ranks_result!(3=>7, diamonds),
        consecutive_ranks!(3-7 hearts) => consecutive_ranks_result!(3=>7, hearts),
        consecutive_ranks!(3-7 spades) => consecutive_ranks_result!(3=>7, spades),
        consecutive_ranks!(4-8 clubs) => consecutive_ranks_result!(4=>8, clubs),
        consecutive_ranks!(4-8 diamonds) => consecutive_ranks_result!(4=>8, diamonds),
        consecutive_ranks!(4-8 hearts) => consecutive_ranks_result!(4=>8, hearts),
        consecutive_ranks!(4-8 spades) => consecutive_ranks_result!(4=>8, spades),
        consecutive_ranks!(5-9 clubs) => consecutive_ranks_result!(5=>9, clubs),
        consecutive_ranks!(5-9 diamonds) => consecutive_ranks_result!(5=>9, diamonds),
        consecutive_ranks!(5-9 hearts) => consecutive_ranks_result!(5=>9, hearts),
        consecutive_ranks!(5-9 spades) => consecutive_ranks_result!(5=>9, spades),
        consecutive_ranks!(6-10 clubs) => consecutive_ranks_result!(6=>10, clubs),
        consecutive_ranks!(6-10 diamonds) => consecutive_ranks_result!(6=>10, diamonds),
        consecutive_ranks!(6-10 hearts) => consecutive_ranks_result!(6=>10, hearts),
        consecutive_ranks!(6-10 spades) => consecutive_ranks_result!(6=>10, spades),
        consecutive_ranks!(7-11 clubs) => consecutive_ranks_result!(7=>11, clubs),
        consecutive_ranks!(7-11 diamonds) => consecutive_ranks_result!(7=>11, diamonds),
        consecutive_ranks!(7-11 hearts) => consecutive_ranks_result!(7=>11, hearts),
        consecutive_ranks!(7-11 spades) => consecutive_ranks_result!(7=>11, spades),
        consecutive_ranks!(8-12 clubs) => consecutive_ranks_result!(8=>12, clubs),
        consecutive_ranks!(8-12 diamonds) => consecutive_ranks_result!(8=>12, diamonds),
        consecutive_ranks!(8-12 hearts) => consecutive_ranks_result!(8=>12, hearts),
        consecutive_ranks!(8-12 spades) => consecutive_ranks_result!(8=>12, spades),
        consecutive_ranks!(0-3 clubs) => consecutive_ranks_result!(0=>3, clubs),
        consecutive_ranks!(0-3 diamonds) => consecutive_ranks_result!(0=>3, diamonds),
        consecutive_ranks!(0-3 hearts) => consecutive_ranks_result!(0=>3, hearts),
        consecutive_ranks!(0-3 spades) => consecutive_ranks_result!(0=>3, spades),
        consecutive_ranks!(1-4 clubs) => consecutive_ranks_result!(1=>4, clubs),
        consecutive_ranks!(1-4 diamonds) => consecutive_ranks_result!(1=>4, diamonds),
        consecutive_ranks!(1-4 hearts) => consecutive_ranks_result!(1=>4, hearts),
        consecutive_ranks!(1-4 spades) => consecutive_ranks_result!(1=>4, spades),
        consecutive_ranks!(2-5 clubs) => consecutive_ranks_result!(2=>5, clubs),
        consecutive_ranks!(2-5 diamonds) => consecutive_ranks_result!(2=>5, diamonds),
        consecutive_ranks!(2-5 hearts) => consecutive_ranks_result!(2=>5, hearts),
        consecutive_ranks!(2-5 spades) => consecutive_ranks_result!(2=>5, spades),
        consecutive_ranks!(3-6 clubs) => consecutive_ranks_result!(3=>6, clubs),
        consecutive_ranks!(3-6 diamonds) => consecutive_ranks_result!(3=>6, diamonds),
        consecutive_ranks!(3-6 hearts) => consecutive_ranks_result!(3=>6, hearts),
        consecutive_ranks!(3-6 spades) => consecutive_ranks_result!(3=>6, spades),
        consecutive_ranks!(4-7 clubs) => consecutive_ranks_result!(4=>7, clubs),
        consecutive_ranks!(4-7 diamonds) => consecutive_ranks_result!(4=>7, diamonds),
        consecutive_ranks!(4-7 hearts) => consecutive_ranks_result!(4=>7, hearts),
        consecutive_ranks!(4-7 spades) => consecutive_ranks_result!(4=>7, spades),
        consecutive_ranks!(5-8 clubs) => consecutive_ranks_result!(5=>8, clubs),
        consecutive_ranks!(5-8 diamonds) => consecutive_ranks_result!(5=>8, diamonds),
        consecutive_ranks!(5-8 hearts) => consecutive_ranks_result!(5=>8, hearts),
        consecutive_ranks!(5-8 spades) => consecutive_ranks_result!(5=>8, spades),
        consecutive_ranks!(6-9 clubs) => consecutive_ranks_result!(6=>9, clubs),
        consecutive_ranks!(6-9 diamonds) => consecutive_ranks_result!(6=>9, diamonds),
        consecutive_ranks!(6-9 hearts) => consecutive_ranks_result!(6=>9, hearts),
        consecutive_ranks!(6-9 spades) => consecutive_ranks_result!(6=>9, spades),
        consecutive_ranks!(7-10 clubs) => consecutive_ranks_result!(7=>10, clubs),
        consecutive_ranks!(7-10 diamonds) => consecutive_ranks_result!(7=>10, diamonds),
        consecutive_ranks!(7-10 hearts) => consecutive_ranks_result!(7=>10, hearts),
        consecutive_ranks!(7-10 spades) => consecutive_ranks_result!(7=>10, spades),
        consecutive_ranks!(8-11 clubs) => consecutive_ranks_result!(8=>11, clubs),
        consecutive_ranks!(8-11 diamonds) => consecutive_ranks_result!(8=>11, diamonds),
        consecutive_ranks!(8-11 hearts) => consecutive_ranks_result!(8=>11, hearts),
        consecutive_ranks!(8-11 spades) => consecutive_ranks_result!(8=>11, spades),
        consecutive_ranks!(9-12 clubs) => consecutive_ranks_result!(9=>12, clubs),
        consecutive_ranks!(9-12 diamonds) => consecutive_ranks_result!(9=>12, diamonds),
        consecutive_ranks!(9-12 hearts) => consecutive_ranks_result!(9=>12, hearts),
        consecutive_ranks!(9-12 spades) => consecutive_ranks_result!(9=>12, spades),

        CLUBS_FACE_FLAGS => "the club faces".into(),
        DIAMONDS_FACE_FLAGS => "the diamond faces".into(),
        HEARTS_FACE_FLAGS => "the heart faces".into(),
        SPADES_FACE_FLAGS => "the spade faces".into(),

        consecutive_ranks!(0-2 clubs) => consecutive_ranks_result!(0=>2, clubs),
        consecutive_ranks!(0-2 diamonds) => consecutive_ranks_result!(0=>2, diamonds),
        consecutive_ranks!(0-2 hearts) => consecutive_ranks_result!(0=>2, hearts),
        consecutive_ranks!(0-2 spades) => consecutive_ranks_result!(0=>2, spades),
        consecutive_ranks!(1-3 clubs) => consecutive_ranks_result!(1=>3, clubs),
        consecutive_ranks!(1-3 diamonds) => consecutive_ranks_result!(1=>3, diamonds),
        consecutive_ranks!(1-3 hearts) => consecutive_ranks_result!(1=>3, hearts),
        consecutive_ranks!(1-3 spades) => consecutive_ranks_result!(1=>3, spades),
        consecutive_ranks!(2-4 clubs) => consecutive_ranks_result!(2=>4, clubs),
        consecutive_ranks!(2-4 diamonds) => consecutive_ranks_result!(2=>4, diamonds),
        consecutive_ranks!(2-4 hearts) => consecutive_ranks_result!(2=>4, hearts),
        consecutive_ranks!(2-4 spades) => consecutive_ranks_result!(2=>4, spades),
        consecutive_ranks!(3-5 clubs) => consecutive_ranks_result!(3=>5, clubs),
        consecutive_ranks!(3-5 diamonds) => consecutive_ranks_result!(3=>5, diamonds),
        consecutive_ranks!(3-5 hearts) => consecutive_ranks_result!(3=>5, hearts),
        consecutive_ranks!(3-5 spades) => consecutive_ranks_result!(3=>5, spades),
        consecutive_ranks!(4-6 clubs) => consecutive_ranks_result!(4=>6, clubs),
        consecutive_ranks!(4-6 diamonds) => consecutive_ranks_result!(4=>6, diamonds),
        consecutive_ranks!(4-6 hearts) => consecutive_ranks_result!(4=>6, hearts),
        consecutive_ranks!(4-6 spades) => consecutive_ranks_result!(4=>6, spades),
        consecutive_ranks!(5-7 clubs) => consecutive_ranks_result!(5=>7, clubs),
        consecutive_ranks!(5-7 diamonds) => consecutive_ranks_result!(5=>7, diamonds),
        consecutive_ranks!(5-7 hearts) => consecutive_ranks_result!(5=>7, hearts),
        consecutive_ranks!(5-7 spades) => consecutive_ranks_result!(5=>7, spades),
        consecutive_ranks!(6-8 clubs) => consecutive_ranks_result!(6=>8, clubs),
        consecutive_ranks!(6-8 diamonds) => consecutive_ranks_result!(6=>8, diamonds),
        consecutive_ranks!(6-8 hearts) => consecutive_ranks_result!(6=>8, hearts),
        consecutive_ranks!(6-8 spades) => consecutive_ranks_result!(6=>8, spades),
        consecutive_ranks!(7-9 clubs) => consecutive_ranks_result!(7=>9, clubs),
        consecutive_ranks!(7-9 diamonds) => consecutive_ranks_result!(7=>9, diamonds),
        consecutive_ranks!(7-9 hearts) => consecutive_ranks_result!(7=>9, hearts),
        consecutive_ranks!(7-9 spades) => consecutive_ranks_result!(7=>9, spades),
        consecutive_ranks!(8-10 clubs) => consecutive_ranks_result!(8=>10, clubs),
        consecutive_ranks!(8-10 diamonds) => consecutive_ranks_result!(8=>10, diamonds),
        consecutive_ranks!(8-10 hearts) => consecutive_ranks_result!(8=>10, hearts),
        consecutive_ranks!(8-10 spades) => consecutive_ranks_result!(8=>10, spades),
        consecutive_ranks!(9-11 clubs) => consecutive_ranks_result!(9=>11, clubs),
        consecutive_ranks!(9-11 diamonds) => consecutive_ranks_result!(9=>11, diamonds),
        consecutive_ranks!(9-11 hearts) => consecutive_ranks_result!(9=>11, hearts),
        consecutive_ranks!(9-11 spades) => consecutive_ranks_result!(9=>11, spades),
        /* These are the face cards. I'm leaving these here for completeness.
        consecutive_ranks!(10-12 clubs) => consecutive_ranks_result!(10=>12, clubs),
        consecutive_ranks!(10-12 diamonds) => consecutive_ranks_result!(10=>12, diamonds),
        consecutive_ranks!(10-12 hearts) => consecutive_ranks_result!(10=>12, hearts),
        consecutive_ranks!(10-12 spades) => consecutive_ranks_result!(10=>12, spades),
        */
        consecutive_ranks!(0-1 clubs) => consecutive_ranks_result!(0=>1, clubs),
        consecutive_ranks!(0-1 diamonds) => consecutive_ranks_result!(0=>1, diamonds),
        consecutive_ranks!(0-1 hearts) => consecutive_ranks_result!(0=>1, hearts),
        consecutive_ranks!(0-1 spades) => consecutive_ranks_result!(0=>1, spades),
        consecutive_ranks!(1-2 clubs) => consecutive_ranks_result!(1=>2, clubs),
        consecutive_ranks!(1-2 diamonds) => consecutive_ranks_result!(1=>2, diamonds),
        consecutive_ranks!(1-2 hearts) => consecutive_ranks_result!(1=>2, hearts),
        consecutive_ranks!(1-2 spades) => consecutive_ranks_result!(1=>2, spades),
        consecutive_ranks!(2-3 clubs) => consecutive_ranks_result!(2=>3, clubs),
        consecutive_ranks!(2-3 diamonds) => consecutive_ranks_result!(2=>3, diamonds),
        consecutive_ranks!(2-3 hearts) => consecutive_ranks_result!(2=>3, hearts),
        consecutive_ranks!(2-3 spades) => consecutive_ranks_result!(2=>3, spades),
        consecutive_ranks!(3-4 clubs) => consecutive_ranks_result!(3=>4, clubs),
        consecutive_ranks!(3-4 diamonds) => consecutive_ranks_result!(3=>4, diamonds),
        consecutive_ranks!(3-4 hearts) => consecutive_ranks_result!(3=>4, hearts),
        consecutive_ranks!(3-4 spades) => consecutive_ranks_result!(3=>4, spades),
        consecutive_ranks!(4-5 clubs) => consecutive_ranks_result!(4=>5, clubs),
        consecutive_ranks!(4-5 diamonds) => consecutive_ranks_result!(4=>5, diamonds),
        consecutive_ranks!(4-5 hearts) => consecutive_ranks_result!(4=>5, hearts),
        consecutive_ranks!(4-5 spades) => consecutive_ranks_result!(4=>5, spades),
        consecutive_ranks!(5-6 clubs) => consecutive_ranks_result!(5=>6, clubs),
        consecutive_ranks!(5-6 diamonds) => consecutive_ranks_result!(5=>6, diamonds),
        consecutive_ranks!(5-6 hearts) => consecutive_ranks_result!(5=>6, hearts),
        consecutive_ranks!(5-6 spades) => consecutive_ranks_result!(5=>6, spades),
        consecutive_ranks!(6-7 clubs) => consecutive_ranks_result!(6=>7, clubs),
        consecutive_ranks!(6-7 diamonds) => consecutive_ranks_result!(6=>7, diamonds),
        consecutive_ranks!(6-7 hearts) => consecutive_ranks_result!(6=>7, hearts),
        consecutive_ranks!(6-7 spades) => consecutive_ranks_result!(6=>7, spades),
        consecutive_ranks!(7-8 clubs) => consecutive_ranks_result!(7=>8, clubs),
        consecutive_ranks!(7-8 diamonds) => consecutive_ranks_result!(7=>8, diamonds),
        consecutive_ranks!(7-8 hearts) => consecutive_ranks_result!(7=>8, hearts),
        consecutive_ranks!(7-8 spades) => consecutive_ranks_result!(7=>8, spades),
        consecutive_ranks!(8-9 clubs) => consecutive_ranks_result!(8=>9, clubs),
        consecutive_ranks!(8-9 diamonds) => consecutive_ranks_result!(8=>9, diamonds),
        consecutive_ranks!(8-9 hearts) => consecutive_ranks_result!(8=>9, hearts),
        consecutive_ranks!(8-9 spades) => consecutive_ranks_result!(8=>9, spades),
        consecutive_ranks!(9-10 clubs) => consecutive_ranks_result!(9=>10, clubs),
        consecutive_ranks!(9-10 diamonds) => consecutive_ranks_result!(9=>10, diamonds),
        consecutive_ranks!(9-10 hearts) => consecutive_ranks_result!(9=>10, hearts),
        consecutive_ranks!(9-10 spades) => consecutive_ranks_result!(9=>10, spades),
        consecutive_ranks!(10-11 clubs) => consecutive_ranks_result!(10=>11, clubs),
        consecutive_ranks!(10-11 diamonds) => consecutive_ranks_result!(10=>11, diamonds),
        consecutive_ranks!(10-11 hearts) => consecutive_ranks_result!(10=>11, hearts),
        consecutive_ranks!(10-11 spades) => consecutive_ranks_result!(10=>11, spades),
        consecutive_ranks!(11-12 clubs) => consecutive_ranks_result!(11=>12, clubs),
        consecutive_ranks!(11-12 diamonds) => consecutive_ranks_result!(11=>12, diamonds),
        consecutive_ranks!(11-12 hearts) => consecutive_ranks_result!(11=>12, hearts),
        consecutive_ranks!(11-12 spades) => consecutive_ranks_result!(11=>12, spades),

        fs if flags.count_ones() == 1 => get_card_string(get_lowest_card(fs)).into(),

        _ => CARD_FLAGS_DISPLAY_FALLBACK.into(),
    }
}

fn get_lowest_card(flags: u64) -> Card {
    flags.trailing_zeros() as Card
}

#[cfg(test)]
mod tests {
    use super::*;
    use quickcheck::*;

    #[test]
    fn test_no_card_flags_resort_to_the_fallback() {
        quickcheck(no_card_flags_resort_to_the_fallback as fn(CardFlags) -> TestResult)
    }
    fn no_card_flags_resort_to_the_fallback(flags: CardFlags) -> TestResult {
        let string = flags.to_string();

        test_println!("{:#?} => {} <=", flags, string);

        if string.contains(CARD_FLAGS_DISPLAY_FALLBACK) || string == "" {
            TestResult::failed()
        } else {
            TestResult::passed()
        }
    }

    #[test]
    fn test_suits_combined_with_rank_does_not_use_the_fallback() {
        let flags = CardFlags::new(rank_pattern!(0) | CLUBS_FLAGS);

        assert!(!no_card_flags_resort_to_the_fallback(flags).is_failure());
    }
    #[test]
    fn this_generated_one_does_not_use_the_fallback() {
        //if this fails and everything else passes, then one of
        //`test_no_card_flags_resort_to_the_fallback`,
        //`test_no_special_flag_uses_the_fallback`, or
        //`test_no_non_special_flag_uses_the_fallback`
        //aren't covering enough space.

        let flags = CardFlags::new(0b1000000010101000000000010000010101000100111110100000);

        assert!(!no_card_flags_resort_to_the_fallback(flags).is_failure());
    }

    impl Arbitrary for CardFlags {
        fn arbitrary<G: Gen>(g: &mut G) -> Self {
            CardFlags(g.gen_range(0, ONE_PAST_CARD_FLAGS_MAX))
        }

        fn shrink(&self) -> Box<Iterator<Item = Self>> {
            match self.0 {
                0 => empty_shrinker(),
                x => {
                    let tracking_flags = 0;
                    macro_rules! check {
                        ($to_remove:expr) => {
                            if tracking_flags & $to_remove == $to_remove {
                                let new_x = x & !($to_remove);
                                if new_x != x {
                                    return single_shrinker(CardFlags::new(new_x));
                                }
                            }
                        };
                    }

                    check!(CLUBS_FLAGS);
                    check!(DIAMONDS_FLAGS);
                    check!(HEARTS_FLAGS);
                    check!(SPADES_FLAGS);

                    check!(CLUBS_FACE_FLAGS);
                    check!(DIAMONDS_FACE_FLAGS);
                    check!(HEARTS_FACE_FLAGS);
                    check!(SPADES_FACE_FLAGS);

                    check!(rank_pattern!(0));
                    check!(rank_pattern!(1));
                    check!(rank_pattern!(2));
                    check!(rank_pattern!(3));
                    check!(rank_pattern!(4));
                    check!(rank_pattern!(5));
                    check!(rank_pattern!(6));
                    check!(rank_pattern!(7));
                    check!(rank_pattern!(8));
                    check!(rank_pattern!(9));
                    check!(rank_pattern!(10));
                    check!(rank_pattern!(11));
                    check!(rank_pattern!(12));

                    for i in 0..DECK_SIZE {
                        check!(1 << i);
                    }

                    empty_shrinker()
                }
            }
        }
    }

    #[derive(Clone)]
    pub struct Special<T>(T);

    impl Arbitrary for Special<u64> {
        fn arbitrary<G: Gen>(g: &mut G) -> Self {
            let index = g.gen_range(0, SPECIAL_FLAGS.len());
            test_println!("index: {}", index);
            Special(SPECIAL_FLAGS[index])
        }

        fn shrink(&self) -> Box<Iterator<Item = Self>> {
            #[allow(dead_code)]
            pub struct FlagShrinker {
                i: usize,
            }

            impl FlagShrinker {
                pub fn new(x: u64) -> Box<Iterator<Item = Special<u64>>> {
                    if x == 0 {
                        Box::new(std::iter::empty().map(Special))
                    } else if let Some(i) = SPECIAL_FLAGS.iter().position(|&e| e == x) {
                        Box::new(FlagShrinker { i })
                    } else {
                        Box::new(std::iter::empty().map(Special))
                    }
                }
            }

            impl Iterator for FlagShrinker {
                type Item = Special<u64>;
                fn next(&mut self) -> Option<Special<u64>> {
                    // let old_value = SPECIAL_FLAGS[self.i];
                    // let mut new_index = self.i + 1;
                    // while new_index < SPECIAL_FLAGS.len() {
                    //     let new_value = SPECIAL_FLAGS[new_index];
                    //
                    //     if new_value.count_ones() < old_value.count_ones() {
                    //         test_println!("shrunk index: {}", new_index);
                    //         return Some(Special(SPECIAL_FLAGS[new_index]));
                    //     } else {
                    //         test_println!("skipped index: {}", new_index);
                    //         return None;
                    //     }
                    //     new_index += 1;
                    // }

                    //the above is so slow I suspoect it doesn't actually terminate.
                    None
                }
            }

            Box::new(FlagShrinker::new(self.0))
        }
    }

    impl fmt::Debug for Special<u64> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            write!(f, "{:052b}", self.0)
        }
    }

    impl Arbitrary for Special<CardFlags> {
        fn arbitrary<G: Gen>(g: &mut G) -> Self {
            Special(CardFlags(
                SPECIAL_FLAGS[g.gen_range(0, SPECIAL_FLAGS.len())],
            ))
        }

        fn shrink(&self) -> Box<Iterator<Item = Self>> {
            Box::new(self.0.shrink().map(Special))
        }
    }

    impl fmt::Debug for Special<CardFlags> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            write!(f, "{:052b}", (self.0).0)
        }
    }

    #[test]
    fn test_no_special_flag_uses_the_fallback() {
        quickcheck(no_special_flag_uses_the_fallback as fn(Special<CardFlags>) -> TestResult)
    }
    fn no_special_flag_uses_the_fallback(Special(flags): Special<CardFlags>) -> TestResult {
        no_card_flags_resort_to_the_fallback(flags)
    }

    #[test]
    fn test_each_special_flag_produces_the_expected_outcome() {
        quickcheck(
            each_special_flag_produces_the_expected_outcome as fn(Special<CardFlags>) -> TestResult,
        )
    }
    fn each_special_flag_produces_the_expected_outcome(
        Special(flags): Special<CardFlags>,
    ) -> TestResult {
        let expected = write_card_set_str(&flags.0);
        let string = flags.to_string();

        let passes = expected == string;

        if !passes {
            test_println!("{:#?} => {} =/= {}", flags, string, expected);
        }

        TestResult::from_bool(passes)
    }

    #[derive(Clone, Debug)]
    struct NonSpecial<T>(T);

    impl Arbitrary for NonSpecial<CardFlags> {
        fn arbitrary<G: Gen>(g: &mut G) -> Self {
            for _ in 0..16 {
                let genned = CardFlags(g.gen_range(0, ONE_PAST_CARD_FLAGS_MAX));

                let subsets = get_special_subsets(&SPECIAL_FLAGS, genned);

                if subsets.len() == 0 {
                    return NonSpecial(genned);
                }

                let mut test_genned = genned.0;
                for subset in subsets {
                    test_genned &= !subset;
                    if test_genned == 0 {
                        break;
                    }
                }

                if test_genned == 0 {
                    return NonSpecial(genned);
                }
            }
            return NonSpecial(CardFlags(0));
        }

        fn shrink(&self) -> Box<Iterator<Item = Self>> {
            Box::new(self.0.shrink().map(NonSpecial))
        }
    }

    #[test]
    fn test_no_non_special_flag_uses_the_fallback() {
        quickcheck(no_non_special_flag_uses_the_fallback as fn(NonSpecial<CardFlags>) -> TestResult)
    }
    fn no_non_special_flag_uses_the_fallback(
        NonSpecial(flags): NonSpecial<CardFlags>,
    ) -> TestResult {
        no_card_flags_resort_to_the_fallback(flags)
    }

    #[test]
    fn test_no_non_special_is_too_long() {
        QuickCheck::new()
            .min_tests_passed(52 << 4)
            .quickcheck(no_non_special_is_too_long as fn(NonSpecial<CardFlags>) -> bool);
    }
    fn no_non_special_is_too_long(NonSpecial(flags): NonSpecial<CardFlags>) -> bool {
        flag_string_is_not_too_long(flags)
    }

    #[test]
    fn all_but_clubs_number_cards_is_not_too_long() {
        let flags = RED_FLAGS | SPADES_FLAGS | CLUBS_FACE_FLAGS | rank_pattern!(0);

        assert!(flag_string_is_not_too_long(CardFlags::new(flags)));
        assert!(false);
    }

    fn flag_string_is_not_too_long(flags: CardFlags) -> bool {
        let string = flags.to_string();
        test_println!("{}", string);
        string.len() <= 64
    }

    #[test]
    fn all_but_clubs_number_cards_produces_correct_subsets() {
        let flags = RED_FLAGS | SPADES_FLAGS | CLUBS_FACE_FLAGS | rank_pattern!(0);

        assert_eq!(
            vec![RED_FLAGS, SPADES_FLAGS, CLUBS_FACE_FLAGS, rank_pattern!(0)],
            get_special_subsets(&SPECIAL_FLAGS, CardFlags::new(flags))
        );
    }

    #[test]
    fn test_no_flag_produces_more_subsets_than_were_used_to_make_it() {
        // this ensures that not string is longer than it needs to be.
        quickcheck(
            no_flag_produces_more_subsets_than_were_used_to_make_it
                as fn(Vec<Special<u64>>) -> TestResult,
        )
    }
    fn no_flag_produces_more_subsets_than_were_used_to_make_it(
        original_subsets: Vec<Special<u64>>,
    ) -> TestResult {
        let original_subsets: Vec<_> = original_subsets
            .into_iter()
            .map(|Special(flags)| flags)
            .collect();
        let original_len = original_subsets.len();
        if original_len == 0 {
            return TestResult::discard();
        }

        let flags = original_subsets.iter().fold(0u64, |acc, flag| acc | flag);

        let actual_subsets = get_special_subsets(&SPECIAL_FLAGS, CardFlags::new(flags));

        let actual_len = actual_subsets.len();

        let was_le = actual_len <= original_len;

        if !was_le {
            panic!(
                "actual was larger than original!:\n  actual: `{:?}`,\n original: `{:?}`",
                card_bin_formatted_vec!(actual_subsets),
                card_bin_formatted_vec!(original_subsets)
            );
        }

        TestResult::from_bool(was_le)
    }

    #[test]
    fn test_small_subsets_do_not_produce_more_subsets_than_were_used_to_make_them() {
        no_flag_produces_more_subsets_than_were_used_to_make_it(vec![
            Special(consecutive_ranks!(0-1 clubs)),
            Special(consecutive_ranks!(1-2 spades)),
        ]);
    }

    #[test]
    fn test_small_subsets_are_optimized_properly() {
        let too_many_sets = vec![
            rank_pattern!(0) & CLUBS_FLAGS,
            rank_pattern!(1 black),
            rank_pattern!(2) & SPADES_FLAGS,
        ];
        assert!(
            false,
            "test assert {:?}",
            card_bin_formatted_vec!(get_unchosen_sets(
                &SPECIAL_FLAGS,
                too_many_sets.iter().fold(0, |acc, f| acc | f)
            ))
        );
        let mut output = optimize_set_cover(&SPECIAL_FLAGS, too_many_sets);

        output.sort();

        let expected = vec![
            consecutive_ranks!(0-1 clubs),
            consecutive_ranks!(1-2 spades),
        ];

        assert_eq!(output, expected);
    }

    #[cfg(feature = "false")]
    mod toy_4_suits {
        use super::*;
        type ToyFlags = u8;

        pub const RANK_COUNT: ToyFlags = 2;

        pub const CLUBS_FLAGS: ToyFlags = 0b0000_0011;
        pub const DIAMONDS_FLAGS: ToyFlags = CLUBS_FLAGS << RANK_COUNT;
        pub const HEARTS_FLAGS: ToyFlags = CLUBS_FLAGS << (RANK_COUNT * 2);
        pub const SPADES_FLAGS: ToyFlags = CLUBS_FLAGS << (RANK_COUNT * 3);

        macro_rules! rank_pattern {
            (0) => {
                0b0101_0101
            };
            (1) => {
                0b1010_1010
            };
        }

        pub const RANK_FLAGS: [ToyFlags; RANK_COUNT as usize] = [0b0101_0101, 0b1010_1010];

        const FLAGS_DISPLAY_FALLBACK: &'static str = "the selected cards";

        fn flags_string<'s>(flags: ToyFlags) -> Cow<'s, str> {
            match flags {
                0 => "{}".into(),
                //Suits
                CLUBS_FLAGS => "the clubs".into(),
                DIAMONDS_FLAGS => "the diamonds".into(),
                HEARTS_FLAGS => "the hearts".into(),
                SPADES_FLAGS => "the spades".into(),
                //Ranks
                rank_pattern!(0) => "the aces".into(),
                rank_pattern!(1) => "the twos".into(),
                fs if flags.count_ones() == 1 => card_string(get_lowest_card(fs)).into(),
                _ => FLAGS_DISPLAY_FALLBACK.into(),
            }

            // idea of how the working version should work:
            // go through te special subsets, largest to amallest.
            // When you find a subset that is represented in the flags
            // set those bits in another set of flags.call these the
            // tracking flags, If a subset is completely covered by the
            // set bit in the tracking flags then skip it.
        }

        type ToyCard = u8;

        fn get_lowest_card(flags: ToyFlags) -> ToyCard {
            flags.trailing_zeros() as ToyCard
        }

        fn card_string(flags: ToyCard) -> &'static str {
            match flags {
                0 => "the 1 of clubs",
                1 => "the 2 of clubs",
                2 => "the 1 of diamonds",
                3 => "the 2 of diamonds",
                4 => "the 1 of hearts",
                5 => "the 2 of hearts",
                6 => "the 1 of spades",
                7 => "the 2 of spades",
                _ => "fn card_string(flags: ToyCard) -> &'static str",
            }
        }

        #[test]
        fn get_lowest_card_does_what_i_want() {
            assert_eq!(get_lowest_card(0b1), 0);
            assert_eq!(get_lowest_card(0b10), 1);
            assert_eq!(get_lowest_card(0b100), 2);
            assert_eq!(get_lowest_card(0b1000), 3);
            assert_eq!(get_lowest_card(0b10000), 4);
            assert_eq!(get_lowest_card(0b100000), 5);
            assert_eq!(get_lowest_card(0b1000000), 6);
            assert_eq!(get_lowest_card(0b10000000), 7);
        }

        #[test]
        fn test_no_flags_resort_to_the_fallback() {
            quickcheck(no_flags_resort_to_the_fallback as fn(ToyFlags) -> TestResult)
        }
        fn no_flags_resort_to_the_fallback(flags: ToyFlags) -> TestResult {
            let string = flags_string(flags);

            test_println!("{:08b} => {} <=", flags, string);

            if string.contains(FLAGS_DISPLAY_FALLBACK) || string == "" {
                TestResult::failed()
            } else {
                TestResult::passed()
            }
        }

        #[test]
        fn test_suits_combined_with_rank_does_not_use_the_fallback() {
            let flags = rank_pattern!(0) | CLUBS_FLAGS;

            assert!(!no_flags_resort_to_the_fallback(flags).is_failure());
        }
        #[test]
        fn test_consecutive_ranks_0_1_clubs_does_not_use_the_fallback() {
            let flags = consecutive_ranks!(0 - 1 clubs);

            assert!(!no_flags_resort_to_the_fallback(flags).is_failure());
        }

        #[test]
        fn test_pairs_of_cards_with_the_same_colour_and_rank_produce_the_expected_results() {
            assert_eq!(
                flags_string(0b01_00_00_01),
                <Cow<str>>::from("the black aces")
            );
            assert_eq!(
                flags_string(0b10_00_00_10),
                <Cow<str>>::from("the black twos")
            );
            assert_eq!(
                flags_string(0b00_01_01_00),
                <Cow<str>>::from("the red aces")
            );
            assert_eq!(
                flags_string(0b00_10_10_00),
                <Cow<str>>::from("the red twos")
            );
        }

    }

    mod toy_2_suits {
        use super::*;
        type ToyFlags = u64;

        pub const RANK_COUNT: ToyFlags = 4;

        pub const CLUBS_FLAGS: ToyFlags = 0b0000_1111;
        pub const DIAMONDS_FLAGS: ToyFlags = CLUBS_FLAGS << RANK_COUNT;

        macro_rules! rank_pattern {
            (0) => {
                0b0001_0001
            };
            ($x:expr) => {
                rank_pattern!(0) << $x
            };
        }

        //TODO complete these two arrays
        pub const SPECIAL_FLAGS: [ToyFlags;11] = [0b1111_1111, 0b1111_0000, 0b0000_1111, 0b1000_0000, 0b0100_0000, 0b0010_0000, 0b0001_0000, 0b0000_1000, 0b0000_0100, 0b0000_0010, 0b0000_0001];
        pub const OPTIMAL_SUBSETS: [&'static [ToyFlags]; 256] = [
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
        ];

        #[derive(Clone, Debug)]
        struct PermutedSpecialFlags(Vec<ToyFlags>);

        impl Arbitrary for PermutedSpecialFlags {
            fn arbitrary<G: Gen>(g: &mut G) -> Self {
                let mut all_special_flags: Vec<_> = SPECIAL_FLAGS.iter().cloned().collect();

                //TODO use only plausible orderings
                g.shuffle(&mut all_special_flags);

                PermutedSpecialFlags(all_special_flags)
            }

            fn shrink(&self) -> Box<Iterator<Item = Self>> {
                Box::new(self.0.shrink().map(PermutedSpecialFlags))
            }
        }

        #[test]
        fn test_that_there_is_no_order_that_always_produces_no_more_subsets_than_were_used_to_make_it(
        ) {
            // this ensures that not string is longer than it needs to be.
            quickcheck(
                no_set_of_flags_produces_more_subsets_than_were_used_to_make_it
                    as fn(PermutedSpecialFlags) -> TestResult,
            )
        }

        fn no_set_of_flags_produces_more_subsets_than_were_used_to_make_it(PermutedSpecialFlags(p): PermutedSpecialFlags) -> TestResult {
            let mut result;
            for i in 0..=u8::max_value() {
                result = no_flag_produces_more_subsets_than_were_used_to_make_it(&p, OPTIMAL_SUBSETS[i as usize]);

                if result.is_failure() {
                    return result;
                }
            }
            panic!(
                "permutation appeared to work! `{:?}`",
                card_bin_formatted_vec!(p),
            );
            result
        }

        fn no_flag_produces_more_subsets_than_were_used_to_make_it(
            all_special_flags: &[ToyFlags],
            original_subsets: &[ToyFlags],
        ) -> TestResult {
            let original_len = original_subsets.len();
            if original_len == 0 {
                return TestResult::discard();
            }

            let flags = original_subsets.iter().fold(0u64, |acc, flag| acc | flag);

            let actual_subsets = get_special_subsets(all_special_flags, CardFlags::new(flags));

            let actual_len = actual_subsets.len();

            let was_le = actual_len <= original_len;

            if !was_le {
                panic!(
                    "actual was larger than original!:\n  actual: `{:?}`,\n original: `{:?}`",
                    card_bin_formatted_vec!(actual_subsets),
                    card_bin_formatted_vec!(original_subsets)
                );
            }

            TestResult::from_bool(was_le)
        }
    }

    macro_rules! across_all_suits {
        ($flags:expr) => {
            ($flags & 0b0001_1111_1111_1111)
                | (($flags & 0b0001_1111_1111_1111) << RANK_COUNT)
                | (($flags & 0b0001_1111_1111_1111) << (RANK_COUNT * 2))
                | (($flags & 0b0001_1111_1111_1111) << (RANK_COUNT * 3))
        };
    }

    pub const OLD_RANK_FLAGS: [u64; RANK_COUNT as usize] = [
        across_all_suits!(1),
        across_all_suits!(1 << 1),
        across_all_suits!(1 << 2),
        across_all_suits!(1 << 3),
        across_all_suits!(1 << 4),
        across_all_suits!(1 << 5),
        across_all_suits!(1 << 6),
        across_all_suits!(1 << 7),
        across_all_suits!(1 << 8),
        across_all_suits!(1 << 9),
        across_all_suits!(1 << 10),
        across_all_suits!(1 << 11),
        across_all_suits!(1 << 12),
    ];

    #[allow(non_snake_case)]
    #[test]
    fn RANK_FLAGS_matches_OLD_RANK_FLAGS() {
        for i in 0..RANK_COUNT as usize {
            assert_eq!(RANK_FLAGS[i], OLD_RANK_FLAGS[i]);
        }
    }
}

impl fmt::Debug for CardFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let v = self.0;
        if f.alternate() {
            return if v == 0 {
                write!(f, "{:52b}", v)
            } else {
                write!(f, "{:052b}", v)
            };
        }
        if v >= 1 << 52 {
            write!(f, "INVALID EDGES: {:?}, valid portion:", v)?;
        }

        write!(
            f,
            "{:?}",
            self.cards()
                .into_iter()
                .map(get_card_string)
                .collect::<Vec<_>>(),
        )
    }
}
